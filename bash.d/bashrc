# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

# source rc modules
for x in $(find $HOME/dotfiles/rc.d -type f -name "*.rc");
do
    # FZF not installed on Cygwin - skip for now
    if [[ $(echo $x | egrep "config|fzf" ) ]];
    then
        continue
    fi
    # skip fzf
    #echo source "$x" 2>&1 /dev/null
    source "$x" #2>&1 /dev/null
done

# TODO: migrate all non-bash only exports, and functions files to rc.d
#   aliases have been migrated
# source bash submodules
#source $HOME/dotfiles/bash.d/aliases.bashrc
#source $HOME/dotfiles/bash.d/exports.bashrc
#source $HOME/dotfiles/bash.d/functions.bashrc
#source $HOME/dotfiles/bash.d/completions.bashrc

# NOTE: Sourcing directly for now. If this gets too messy replace
# with a bash function/script to source all config files 
#source /home/$USER/dotfiles/config.d/fzf.config

# TODO: make into script and call 
# display new quote on every source
echo ""
curl https://api.kanye.rest/text
echo ""


## source dotfile configuration submodules





# runtime/shell-agnostic
#for x in $(find $HOME/dotfiles/rc.d -type f -name "*.rc");
#do
#    echo source "$x"
#    source "$x"
#done


export DOWNLOADS_HOME="/cygdrive/c/Users/zcsor/Downloads"
export BRAVE_DOWNLOADS_DIR="/cygdrive/c/Users/zcsor/Downloads/Brave"
PATH="$PATH:$HOME/.local/bin"
EDITOR=vim

# Cygwin x11
export DISPLAY=:0.0

# for cygwin only
CYG_STEM="/cygdrive/c/Users/zcsor/Cygwin"
CYG_BIN="$CYG_STEM/bin"
CYG_LBIN="$CYG_STEM/bin"
CYG_SBIN="$CYG_STEM/usr/sbin"
PATH="$PATH:$CYG_BIN:$CYG_SBIN"

# add absolute path for ~/.local/bin
CYG_HOME_BIN="$CYG_STEM/home/zcsor/.local/bin"
PATH="$CYG_HOME_BIN:$PATH"
PATH="$PATH:~/.local/usr/bin"

# ssh stuff
ssh_cache_pp='eval SSH_AUTH_SOCK=/tmp/ssh-H4TxgnRe83LD/agent.4107; export SSH_AUTH_SOCK;
SSH_AGENT_PID=4108; export SSH_AGENT_PID;
echo Agent pid 4108; && ssh-add /home/zcsor/.ssh/id_rsa'
alias qod="cd $HOME/zac2024/projects/quote-of-the-day"
alias jh="cd $HOME/GIT/jobhunt"

# separate aliases needed for passing a filepath variable since 
# find throws an error if filepath is not the 1st arg when passed  
#echo 'alias fdfn="find $FPATH -type f"' 
#echo 'alias fddn="find $FPATH -type d"' 
#alias fdf="find -type f "


####### CYGWIN ONLY ########
## WORKAROUND FOR BASH FUNCTIONS SOURCING ISSUE  
source "$HOME/dotfiles/bash.d/functions.bash"

testFunction(){
    echo 'Testing for flag $1' "$1"
}

# ex: git clone git@github.com:csorndawg/cheatbook.git
export gh_url_stem="git@github.com:csorndawg"
