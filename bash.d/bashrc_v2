# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi


## ============================================================
## CUSTOM CONFIGURATIONS
## ============================================================

alias python=python3
export EDITOR=vim

# XDG base dirs w/ few custom addons
mk_xdg_dir(){
	mkdir -p $HOME/.local/tmp
	mkdir -p $HOME/.local/common
	mkdir -p $HOME/.local/opt
	mkdir -p $HOME/.local/var
	mkdir -p $HOME/.local/bin
	mkdir -p $HOME/.local/state
	mkdir -p $HOME/.local/share
	mkdir -p $HOME/.config
	mkdir -p $HOME/.cache
}

# set XDG env. vars
export XDG_BIN_HOME="$HOME/.local/bin"
export XDG_TMP_HOME="$HOME/.local/tmp"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_VAR_HOME="$HOME/.local/var"
export XDG_OPT_HOME="$HOME/.local/opt"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"

# KUBE PS1 Prompt String (note: uncomment below if kube-ps1 is not installed)
source $HOME/.local/bin/kube-ps1
#PS1='[\u@\h \W $(kube_ps1)]\$ '

# helper/qol aliases
alias XARGS="$(which xargs)"
alias xargs='xargs -I "{}"'
alias sshpp="eval $(ssh-agent) && ssh-add $HOME/.ssh/id_rsa"


# helper/qol functions
mcd (){
	mkdir -p $1
	cd $1
}

# make BASH defaults more sensible 
HISTSIZE=50000
HISTFILESIZE=2000

# append to history instead of overwriting
shopt -s histappend

# 'ignorespace': don't save command lines which begin with a space to history
# 'erasedups' (alternative 'ignoredups'): don't save duplicates to history
# 'autoshare': automatically share history between multiple running shells
: "${HISTCONTROL:=ignorespace:erasedups:autoshare}"



rtconfs(){
	# ignore RC.D files that cause issues/break setups in BASH/WSL envs.
	IGNORE_PATS=(tmux ssh exports configd)
	for rtconf in $(find $HOME/dotfiles/rc.d -type f); do
		echo ""
		echo "rtconf:  $rtconf"
		IGNORE_FLAG="False"
		for ignr in "${IGNORE_PATS[@]}"; do
			# skip if true
			if [[ $(echo $rtconf | egrep -ci "$ignr") -ge 1 ]]; then
				IGNORE_FLAG="True"
				break
			fi
		done
		# skip file
		if [[ "$IGNORE_FLAG"="True" ]]; then
			echo "IGNORE_FLAG = $IGNORE_FLAG"
			continue
		fi
		echo source "$rtconf"
		source "$rtconf" && echo "$rtconf sourced without issue"

	done
}

# @TESTME
rtconfs  


# @TODO - source bash completion files
# @WORKAROUND - source directly in bashrc
source <(kubectl completion bash)
