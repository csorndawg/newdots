# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


##################################################
###	ADDITONAL EDITS 
##################################################

#####
##### SOURCE STANDARD DOTFILE RC/BASH.D CONFIGURATIONS FIRST 
##### SO ANY WSL LOGIC IS NOT OVERWRITEN 
#####

# @TESTME: RC -> BASH -> ZSH
# RC
source ~/dotfiles/rc.d/aliases.rc 2> /dev/null
source ~/dotfiles/rc.d/functions.rc 2> /dev/null
# BASH
source ~/dotfiles/bash.d/functions.bash 2> /dev/null

#####
##### WSL2 BASH SPECIFIC LOGIC/CONFIGURATIONS
#####

PATH="$PATH:$HOME/.local/lib/bash:$HOME/.local/lib/misc:$HOME/.local/lib/python:$HOME/.local/bin:$HOME/.local/bin/cronjobs:$HOME/git/toolbox/bin:"
alias python=python3

# cache ssh pp
if [ -z "$SSH_AUTH_SOCK" ]; then
    eval $(ssh-agent -s)
fi
ssh-add ~/.ssh/id_rsa < /dev/null 2>/dev/null

alias ta="task add"
alias tl="task list"

# quick backup function
# works with all files and dumps them to an unsorted directory 
# note this dir should be monitored so it doesnt ballon in size
# as of now no protective logic exists, but plan on adding logic or
# cronjob to delete stale versions (>5 copies AND older than 1month) --> TODO
mk_artifact(){
	TARG="$1"
	TARG_NAME="$(basename $TARG)"
	TIMESTAMP=$"(date +%Y%m%d_%H%M%S_%Z)"
	# TODO - logic to check if abs or relative path ; for now assume relativee 
	ART_DIR="$HOME/.local/var/backups/auto"

	# TODO - handle directories logic
	echo rsync -azvh $TARG "$ART_DIR/$TARG_NAME_$TIMESTAMP"
	rsync -azvh $TARG "$ART_DIR/$TARG_NAME_$TIMESTAMP"
}
export CRONLOGS_HOME="$HOME/.local/share/cron/logs"
export EDITOR="vim"
alias VO="source $HOME/.local/state/python/venvs/venv/bin/activate"
alias cht='cht.sh'
alias jc="jupyter console"
~/.local/bin/lib/comp/bash/cht.sh

# ssh tunneling funct
ssh_tunnel(){
    # optional local port
    REMOTE_PORT="$1"
    if [[ -z "$2" ]]; then
        LOCAL_PORT="$1"
    else
        LOCAL_PORT="$2"
    fi
    # default ssh user/host
    SSH_CONN="$3"
    if [[ -z "$3" ]]; then
        SSH_CONN="shelby"
    fi
    echo "ssh -L $REMOTE_PORT:localhost:$LOCAL_PORT $SSH_CONN"
    ssh -L $REMOTE_PORT:localhost:$LOCAL_PORT "$SSH_CONN"
} 

# source fzf shell script
if [[  $(echo "$SHELL"  | egrep zsh -ci) -ge 1 ]]; then
  echo "ZSH shell"
  source "$HOME/.fzf.zsh"
else
  echo "BASH shell"
  # symlink fzf.bash script if DNE
  if [[ -z "$HOME/.fzf.bash" ]]; then
      ln -sr "$HOME/dotfiles/utils.d/fzf.bash"
  fi
  source "$HOME/.fzf.bash"
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash 
alias ff2="source ~/.fzf.bash"

# symlink dotfile bootstrap script to LOCAL_BIN incase anything needs bootstraping
ln -sr "$HOME/dotfiles/utils.d/bootstrap-dotfiles-core" "$HOME/.local/bin/" 2> /dev/null


# freq. repos aliases
alias jh="cd $HOME/git/jobhunt"
alias dot="cd $HOME/dotfiles"
alias clb="cd $HOME/git/cheatbook"
alias tbx="cd $HOME/git/toolbox"
alias kb="cd $HOME/git/kb2"
alias fkx="cd $HOME/git/fortknox"
# freq. repos quick actions
alias jhv="vim $HOME/git/jobhunt/unsorted/quickadd-$(date +%Y%m%d-%H%M%S).md"
alias dotv="vim $HOME/git/newdots/unsorted/quickadd-$(date +%Y%m%d-%H%M%S).md"
alias clbv="vim $HOME/git/cheatlib/unsorted/quickadd-$(date +%Y%m%d-%H%M%S).md"
alias fkxv="vim $HOME/git/fortknox/unsorted/quickadd-$(date +%Y%m%d-%H%M%S).md"
alias tbxv="vim $HOME/git/toolbox/unsorted/quickadd-$(date +%Y%m%d-%H%M%S).md"
alias kbv="vim $HOME/git/kb2/unsorted/quickadd-$(date +%Y%m%d-%H%M%S).md"
