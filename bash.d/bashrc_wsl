# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


### BASH shell >> SH shell
#if  [ ! -z "/bin/bash" ]; then
#	echo 'BASH installed on current machine. Current shell will be changed to BASH if currently set to SH'
#	SHELL="/bin/bash"
#fi
#

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# PRESET
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


##################################################
###	ADDITONAL EDITS 
##################################################

#####
##### SOURCE STANDARD DOTFILE RC/BASH.D CONFIGURATIONS FIRST 
##### SO ANY WSL LOGIC IS NOT OVERWRITEN 
#####

# @TESTME: RC -> BASH -> ZSH
# RC
source ~/dotfiles/rc.d/aliases.rc 2> /dev/null
source ~/dotfiles/rc.d/functions.rc 2> /dev/null

# BASH
source ~/dotfiles/bash.d/functions.bash 1> /dev/null
source ~/dotfiles/bash.d/exports.bash 2> /dev/null
source ~/dotfiles/bash.d/prompt.bash 2> /dev/null
source ~/dotfiles/bash.d/aliases.bash 2> /dev/null


#####
##### WSL2 BASH SPECIFIC LOGIC/CONFIGURATIONS
#####

PATH="$PATH:$HOME/.local/lib/bash:$HOME/.local/lib/misc:$HOME/.local/lib/python:$HOME/.local/bin:$HOME/.local/bin/cronjobs:$HOME/git/toolbox/bin:"
alias python=python3

# cache ssh pp
#if [ -z "$SSH_AUTH_SOCK" ]; then
#    eval $(ssh-agent -s)
#fi
#ssh-add ~/.ssh/id_rsa < /dev/null 2>/dev/null

alias ta="task add"
alias tl="task list"

# quick backup function
# works with all files and dumps them to an unsorted directory 
# note this dir should be monitored so it doesnt ballon in size
# as of now no protective logic exists, but plan on adding logic or
# cronjob to delete stale versions (>5 copies AND older than 1month) --> TODO
mk_artifact(){
	TARG="$1"
	TARG_NAME="$(basename $TARG)"
	TIMESTAMP=$"(date +%Y%m%d_%H%M%S_%Z)"
	# TODO - logic to check if abs or relative path ; for now assume relativee 
	ART_DIR="$HOME/.local/var/backups/auto"

	# TODO - handle directories logic
	echo rsync -azvh $TARG "$ART_DIR/$TARG_NAME_$TIMESTAMP"
	rsync -azvh $TARG "$ART_DIR/$TARG_NAME_$TIMESTAMP"
}
export CRONLOGS_HOME="$HOME/.local/share/cron/logs"
export EDITOR="vim"
alias VO="source $HOME/.local/state/python/venvs/venv/bin/activate"
alias cht='cht.sh'
alias jc="jupyter console"
if [ -f "$HOME/.local/bin/lib/comp/bash/cht.sh" ]; then
    source "$HOME/.local/bin/lib/comp/bash/cht.sh"
fi


# ssh tunneling funct
ssh_tunnel(){
    # optional local port
    REMOTE_PORT="$1"
    if [[ -z "$2" ]]; then
        LOCAL_PORT="$1"
    else
        LOCAL_PORT="$2"
    fi
    # default ssh user/host
    SSH_CONN="$3"
    if [[ -z "$3" ]]; then
        SSH_CONN="shelby"
    fi
    echo "ssh -L $REMOTE_PORT:localhost:$LOCAL_PORT $SSH_CONN"
    ssh -L $REMOTE_PORT:localhost:$LOCAL_PORT "$SSH_CONN"
} 

# source fzf shell script
# check if ZSH shell, otherwise assume BASH 
if [[  $(echo "$SHELL"  | egrep zsh -ci) -ge 1 ]]; then
  #echo "ZSH shell"
  source "$HOME/.fzf.zsh" || echo "Error occurred when sourcing '$HOME/.fzf.zsh'"
else
  #echo "BASH shell"
  # symlink fzf.bash script if DNE
  if [[ -f "$HOME/.fzf.bash" ]]; then
      ln -sr "$HOME/dotfiles/utils.d/fzf.bash" "$HOME/.fzf.bash" 2> /dev/null # dont overwrite if exists
      source "$HOME/.fzf.bash"
  fi
fi

ff2 (){
    if [ ! -f ~/.fzf.bash ]; then
        echo "Error - no '~/.fzf.bash' file found"
        return
    fi
    source ~/.fzf.bash
    source ~/dotfiles/config.d/fzf.config
    export FZF_DEFAULT_OPTS="
      --no-height
      --color=fg:#e5e9f0,bg:#3b4252,hl:#81a1c1 
      --color=fg+:#e5e9f0,bg+:#3b4252,hl+:#81a1c1
      --color=info:#eacb8a,prompt:#bf6069,pointer:#b48dac 
      --color header:italic
      --color=marker:#a3be8b,spinner:#b48dac,header:#a3be8b"
}

# symlink dotfile bootstrap script to LOCAL_BIN incase anything needs bootstraping
ln -sr "$HOME/dotfiles/utils.d/bootstrap-dotfiles-core" "$HOME/.local/bin/" 2> /dev/null

#alias sshpp="eval $(ssh-agent) && ssh-add ~/.ssh/id_rsa"
export BAT_THEME="Nord"


# BASH-IT/OH-MY-BASH IDEAS

## HISTORY

### increase shell history 
HISTSIZE=100000
HISTFILESIZE=100000

### Save multi-line commands as one command
shopt -s cmdhist

### Re-edit the command line for failing history expansions
shopt -s histreedit

### Re-edit the result of history expansions
shopt -s histverify

### save history with newlines instead of ; where possible
shopt -s lithist

### Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

### Don't record some commands
HISTIGNORE="exit:ls:bg:fg:history:clear"

### Enable incremental history search with up/down arrows (also Readline goodness)
### Learn more about this here: https://codeinthehole.com/tips/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/
### bash4 specific ??
# @FIXME - fix before uncommentting
#bind '"\e[A": history-search-backward'
#bind '"\e[B": history-search-forward'
#bind '"\e[C": forward-char'
#bind '"\e[D": backward-char'

### Show history
###case $HIST_STAMPS in
###  "[mm/dd/yyyy]") HISTTIMEFORMAT=$'\033[31m[%m/%d/%Y] \033[36m[%T]\033[0m ' ;;
###  "[dd.mm.yyyy]") HISTTIMEFORMAT=$'\033[31m[%d.%m.%Y] \033[36m[%T]\033[0m ' ;;
###  "[yyyy-mm-dd]") HISTTIMEFORMAT=$'\033[31m[%F] \033[36m[%T]\033[0m ' ;;
###  "mm/dd/yyyy") HISTTIMEFORMAT='%m/%d/%Y %T ' ;;
###  "dd.mm.yyyy") HISTTIMEFORMAT='%d.%m.%Y %T ' ;;
###  "yyyy-mm-dd"|*) HISTTIMEFORMAT='%F %T ' ;;
###esac

HISTTIMEFORMAT=$'\033[31m[%F] \033[36m[%T]\033[0m ' 



## ALIAS/FUNCTIONS

### core
alias ll='ls -lAFh'                         # Preferred 'ls' implementation
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias wget='wget -c'                        # Preferred 'wget' implementation (resume download)
alias c='clear'                             # c:            Clear terminal display
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias show_options='shopt'                  # Show_options: display bash options settings
alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias fix_term='echo -e "\033c"'            # fix_term:     Reset the conosle.  Similar to the reset command
alias cic='bind "set completion-ignore-case on"' # cic:          Make tab-completion case-insensitive
alias src='source ~/.bashrc'                # src:          Reload .bashrc file


### date aliases
alias bdate="date '+%a, %b %d %Y %T %Z'"
alias cal3='cal -3'
alias da='date "+%Y-%m-%d %A    %T %Z"'
alias daysleft='_omb_util_print "There are $(($(date +%j -d"Dec 31, $(date +%Y)")-$(date +%j))) left in year $(date +%Y)."'
alias epochtime='date +%s'
alias mytime='date +%H:%M:%S'
alias secconvert='date -d@1234567890'
alias stamp='date "+%Y%m%d%a%H%M"'
alias timestamp='date "+%Y%m%dT%H%M%S"'
alias today='date +"%A, %B %-d, %Y"'
alias weeknum='date +%V'


### docker aliases
### This is a direct copy of https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/docker.plugin.zsh
alias dbl='docker build'
alias dcin='docker container inspect'
alias dcls='docker container ls'
alias dclsa='docker container ls -a'
alias dib='docker image build'
alias dii='docker image inspect'
alias dils='docker image ls'
alias dipu='docker image push'
alias dirm='docker image rm'
alias dit='docker image tag'
alias dlo='docker container logs'
alias dnc='docker network create'
alias dncn='docker network connect'
alias dndcn='docker network disconnect'
alias dni='docker network inspect'
alias dnls='docker network ls'
alias dnrm='docker network rm'
alias dpo='docker container port'
alias dpu='docker pull'
alias dr='docker container run'
alias drit='docker container run -it'
alias drm='docker container rm'
alias 'drm!'='docker container rm -f'
alias dst='docker container start'
alias drs='docker container restart'
alias dsta='docker stop $(docker ps -q)'
alias dstp='docker container stop'
alias dtop='docker top'
alias dvi='docker volume inspect'
alias dvls='docker volume ls'
alias dvprune='docker volume prune'
alias dxc='docker container exec'
alias dxcit='docker container exec -it'

### Directory Listing aliases
alias dir='ls -hFx'
alias l.='ls -d .* --color=tty' # short listing, only hidden files - .*
alias l='ls -lathF'             # long, sort by newest to oldest
alias L='ls -latrhF'            # long, sort by oldest to newest
alias la='ls -Al'               # show hidden files
alias lc='ls -lcr'              # sort by change time
alias lk='ls -lSr'              # sort by size
alias lh='ls -lSrh'             # sort by size human readable
alias lm='ls -al | more'        # pipe through 'more'
alias lo='ls -laSFh'            # sort by size largest to smallest
alias lr='ls -lR'               # recursive ls
alias lt='ls -ltr'              # sort by date
alias lu='ls -lur'              # sort by access time

### DU util
alias dud='du -d 1 -h'                      # Short and human-readable directory listing
alias duf='du -sh *'                        # Short and human-readable file listing

### GIT

###
### Functions
###

## The name of the current branch
## Back-compatibility wrapper for when this function was defined here in
## the plugin, before being pulled in to core lib/git.zsh as git_current_branch()
## to fix the core -> git plugin dependency.
function current_branch() {
  git_current_branch
}

### The list of remotes
function current_repository() {
  if ! $_omb_git_git_cmd rev-parse --is-inside-work-tree &> /dev/null; then
    return
  fi
  _omb_util_print $($_omb_git_git_cmd remote -v | cut -d':' -f 2)
}

### Warn if the current branch is a WIP
function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    _omb_util_print "WIP!!"
  fi
}

### Check for develop and similarly named branches
function git_develop_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local branch
  for branch in dev devel development; do
    if command git show-ref -q --verify refs/heads/"$branch"; then
      _omb_util_print "$branch"
      return
    fi
  done
  _omb_util_print develop
}

### Check if main exists and use instead of master
function git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
    if command git show-ref -q --verify "$ref"; then
      _omb_util_print "${ref##*/}"
      return
    fi
  done
  _omb_util_print master
}

###
### Aliases
###
### From Oh-My-Zsh:
### https://github.com/ohmyzsh/ohmyzsh/blob/f36c6db0eac17b022eee87411e6996a5f5fc8457/plugins/git/git.plugin.zsh
###

#alias g='command git'
#alias ga='command git add'
#alias gaa='command git add --all'
#alias gapa='command git add --patch'
#alias gau='command git add --update'
#alias gav='command git add --verbose'
#alias gwip='command git add -A; command git rm $(git ls-files --deleted) 2> /dev/null; command git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'
#
#alias gam='command git am'
#alias gama='command git am --abort'
#alias gamc='command git am --continue'
#alias gamscp='command git am --show-current-patch'
#alias gams='command git am --skip'
#
#alias gap='command git apply'
#alias gapt='command git apply --3way'
#
#alias gbl='command git blame -b -w'
#
#alias gb='command git branch'
#alias gbD='command git branch --delete --force'
#alias gba='command git branch -a'
#alias gbd='command git branch -d'
#alias gbda='command git branch --no-color --merged | command grep -vE "^([+*]|\s*($(git_main_branch)|$(git_develop_branch))\s*$)" | command xargs git branch --delete 2>/dev/null'
#alias gbg='LANG=C command git branch -vv | grep ": gone\]"'
#alias gbgD='LANG=C command git branch --no-color -vv | grep ": gone\]" | awk '"'"'{print $1}'"'"' | command xargs git branch -D'
#alias gbgd='LANG=C command git branch --no-color -vv | grep ": gone\]" | awk '"'"'{print $1}'"'"' | command xargs git branch -d'
#alias gbm='command git branch --move'
#alias gbnm='command git branch --no-merged'
#alias gbr='command git branch --remote'
#alias gbsc='command git branch --show-current'
#alias ggsup='command git branch --set-upstream-to="origin/$(git_current_branch)"'
#
#alias gbs='command git bisect'
#alias gbsb='command git bisect bad'
#alias gbsg='command git bisect good'
#alias gbsn='command git bisect new'
#alias gbso='command git bisect old'
#alias gbsr='command git bisect reset'
#alias gbss='command git bisect start'
#
#alias gcb='command git checkout -b'
#alias gcd='command git checkout "$(git_develop_branch)"'
#alias gcm='command git checkout "$(git_main_branch)"'
#alias gco='command git checkout'
#alias gcor='command git checkout --recurse-submodules'
#
#alias gcp='command git cherry-pick'
#alias gcpa='command git cherry-pick --abort'
#alias gcpc='command git cherry-pick --continue'
#alias gcps='command git cherry-pick -s'
#
#alias gcl='command git clone --recursive'
#function gccd() {
#  command git clone --recurse-submodules "$@"
#  local lastarg=$_
#  [[ -d $lastarg ]] && cd "$lastarg" && return
#  lastarg=${lastarg##*/}
#  cd "${lastarg%.git}"
#}
####compdef _git gccd=git-clone
#
#alias gclean='command git clean -fd'
#
#alias gc!='command git commit --verbose --amend'
#alias gc='command git commit --verbose'
#alias gca!='command git commit --verbose --all --amend'
#alias gca='command git commit --verbose --all'
#alias gcam='command git commit --all --message'
#alias gcan!='command git commit --verbose --all --no-edit --amend'
#alias gcans!='command git commit --verbose --all --signoff --no-edit --amend'
#alias gcas='command git commit --all --signoff'
#alias gcasm='command git commit --all --signoff --message'
#alias gcmsg='command git commit --message'
#alias gcn!='command git commit --verbose --no-edit --amend'
#alias gcs='command git commit --gpg-sign'
#alias gcsm='command git commit --signoff --message'
#alias gcss='command git commit --gpg-sign --signoff'
#alias gcssm='command git commit --gpg-sign --signoff --message'
#
#alias gcf='command git config --list'
#
#alias gdct='command git describe --tags `git rev-list --tags --max-count=1`'
#
#alias gd='command git diff'
#alias gdca='command git diff --cached'
#alias gdcw='command git diff --cached --word-diff'
#alias gds='command git diff --staged'
#alias gdw='command git diff --word-diff'
#alias gdup='command git diff @{upstream}'
#function gdnolock() {
#  command git diff "$@" ":(exclude)package-lock.json" ":(exclude)*.lock"
#}
####compdef _git gdnolock=git-diff
#function gdv {
#  command git diff -w "$@" | view -
#}
####compdef _git gdv=git-diff
#
#alias gdt='command git diff-tree --no-commit-id --name-only -r'
#
#alias gdtool='command git difftool -d'
#
#alias gf='command git fetch'
#alias gfa='command git fetch --all --prune'
#alias gfo='command git fetch origin'
#
#alias gg='command git gui citool'
#alias gga='command git gui citool --amend'
#
#alias ghh='command git help'
#
#alias glg='command git log --stat'
#alias glgg='command git log --graph'
#alias glgga='command git log --graph --decorate --all'
#alias glgm='command git log --graph --max-count=10'
#alias glgp='command git log --stat -p'
#alias glo='command git log --oneline --decorate'
#alias glod='command git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
#alias glods='command git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
#alias glog='command git log --oneline --decorate --graph'
#alias gloga='command git log --oneline --decorate --graph --all'
#alias glol='command git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
#alias glola='command git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
#alias glols='command git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
#### Pretty log messages
#function _git_log_prettily(){
#  if [[ $1 ]]; then
#    command git log --pretty="$1"
#  fi
#}
#alias glp='_git_log_prettily'
####compdef _git glp=git-log
#
#alias gignored='command git ls-files -v | grep "^[[:lower:]]"'
#alias gfg='command git ls-files | grep'
#
#alias gm='command git merge'
#alias gma='command git merge --abort'
#alias gmom='command git merge "origin/$(git_main_branch)"'
#alias gms='command git merge --squash'
#alias gmum='command git merge "upstream/$(git_main_branch)"'
#
#alias gmt='command git mergetool --no-prompt' # deprecate?
#alias gmtvim='command git mergetool --no-prompt --tool=vimdiff' # deprecate?
#alias gmtl='command git mergetool --no-prompt'
#alias gmtlvim='command git mergetool --no-prompt --tool=vimdiff'
#
#alias ggpull='command git pull origin "$(git_current_branch)"'
#alias ggpur='ggu'
#alias gl='command git pull'
#alias gluc='command git pull upstream "$(git_current_branch)"'
#alias glum='command git pull upstream "$(git_main_branch)"'
#alias gpr='command git pull --rebase'
#alias gup='command git pull --rebase'
#alias gupa='command git pull --rebase --autostash'
#alias gupav='command git pull --rebase --autostash --verbose'
#alias gupom='command git pull --rebase origin "$(git_main_branch)"'
#alias gupomi='command git pull --rebase=interactive origin "$(git_main_branch)"'
#alias gupv='command git pull --rebase --verbose'
#function ggl {
#  if (($# != 0 && $# != 1)); then
#    command git pull origin "$*"
#  else
#    local b=
#    (($# == 0)) && b=$(git_current_branch)
#    command git pull origin "${b:-$1}"
#  fi
#}
#function ggu {
#  local b=
#  (($# != 1)) && b=$(git_current_branch)
#  command git pull --rebase origin "${b:-$1}"
#}
####compdef _git ggl=git-checkout
####compdef _git ggpull=git-checkout
####compdef _git ggpur=git-checkout
####compdef _git ggu=git-checkout
#
#alias ggpush='command git push origin "$(git_current_branch)"'
#alias gp='command git push'
#alias gpd='command git push --dry-run'
#alias gpf!='command git push --force'
#alias gpf='command git push --force-with-lease'
#alias gpoat='command git push origin --all && command git push origin --tags'
#alias gpod='command git push origin --delete'
#alias gpsup='command git push --set-upstream origin "$(git_current_branch)"'
#alias gpsupf='command git push --set-upstream origin "$(git_current_branch)" --force-with-lease'
#alias gpu='command git push upstream'
#alias gpv='command git push --verbose'
####is-at-least 2.30 "$git_version" && alias gpf='git push --force-with-lease --force-if-includes'
####is-at-least 2.30 "$git_version" && alias gpsupf='git push --set-upstream origin "$(git_current_branch)" --force-with-lease --force-if-includes'
#function ggf {
#  (($# != 1)) && local b=$(git_current_branch)
#  command git push --force origin "${b:=$1}"
#}
#function ggfl {
#  (($# != 1)) && local b=$(git_current_branch)
#  command git push --force-with-lease origin "${b:=$1}"
#}
#function ggp {
#  if (($# != 0 && $# != 1)); then
#    command git push origin "$*"
#  else
#    (($# == 0)) && local b=$(git_current_branch)
#    command git push origin "${b:=$1}"
#  fi
#}
#function ggpnp {
#  if (($# == 0)); then
#    ggl && ggp
#  else
#    ggl "$*" && ggp "$*"
#  fi
#}
##compdef _git ggf=git-checkout
##compdef _git ggfl=git-checkout
##compdef _git ggp=git-checkout
##compdef _git ggpnp=git-checkout
##compdef _git ggpush=git-checkout
##compdef _git gpoat=git-push
#
#alias grb='command git rebase'
#alias grba='command git rebase --abort'
#alias grbc='command git rebase --continue'
#alias grbi='command git rebase --interactive'
#alias grbo='command git rebase --onto'
#alias grbs='command git rebase --skip'
#alias grbd='command git rebase "$(git_develop_branch)"'
#alias grbm='command git rebase "$(git_main_branch)"'
#alias grbom='command git rebase "origin/$(git_main_branch)"'
#
#alias gr='command git remote'
#alias gra='command git remote add'
#alias grmv='command git remote rename'
#alias grrm='command git remote remove'
#alias grset='command git remote set-url'
#alias grup='command git remote update'
#alias grv='command git remote --verbose'
#
#alias gpristine='command git reset --hard && command git clean --force -dfx'
#alias grh='command git reset'
#alias grhh='command git reset --hard'
#alias grhk='command git reset --keep'
#alias grhs='command git reset --soft'
#alias groh='command git reset "origin/$(git_current_branch)" --hard'
#alias grt='cd $(command git rev-parse --show-toplevel || _omb_util_print ".")'
#alias gru='command git reset --'
#
#alias grs='command git restore'
#alias grss='command git restore --source'
#alias grst='command git restore --staged'
#
#alias gunwip='command git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && command git reset HEAD~1'
#alias grev='command git revert'
#
#alias grm='command git rm'
#alias grmc='command git rm --cached'
#
#alias gcount='command git shortlog --summary --numbered'
####compdef _git gcount complete -F _git gcount
#
#alias gsh='command git show'
#alias gsps='command git show --pretty=short --show-signature'
#
#alias gsta='command git stash save'
#alias gstaa='command git stash apply'
#alias gstall='command git stash --all'
#alias gstc='command git stash clear'
#alias gstd='command git stash drop'
#alias gstl='command git stash list'
#alias gstp='command git stash pop'
#alias gsts='command git stash show'
#alias gstu='gsta --include-untracked'
####is-at-least 2.13 "$git_version" && alias gsta='command git stash push'
#
#alias gsb='command git status --short --branch'
#alias gss='command git status --short'
#alias gst='command git status'
#
#alias gsi='command git submodule init'
#alias gsu='command git submodule update'
#
#alias git-svn-dcommit-push='command git svn dcommit && command git push github "$(git_main_branch):svntrunk"'
#alias gsd='command git svn dcommit'
#alias gsr='command git svn rebase'
####compdef _git git-svn-dcommit-push=git
#
#alias gsw='command git switch'
#alias gswc='command git switch --create'
#alias gswd='command git switch "$(git_develop_branch)"'
#alias gswm='command git switch "$(git_main_branch)"'
#
#alias gta='command git tag --annotate'
#alias gts='command git tag --sign'
#alias gtv='command git tag | sort -V'
#function gtl {
#  command git tag --sort=-v:refname -n --list "$1*"
#}
####compdef _git gtl=git-tag
#
#alias gignore='command git update-index --assume-unchanged'
#alias gunignore='command git update-index --no-assume-unchanged'
#
#alias gwch='command git whatchanged -p --abbrev-commit --pretty=medium'
#
#alias gwt='command git worktree'
#alias gwta='command git worktree add'
#alias gwtls='command git worktree list'
#alias gwtmv='command git worktree move'
#alias gwtrm='command git worktree remove'
#
#alias gk='\gitk --all --branches'
#alias gke='\gitk --all $(git log --walk-reflogs --pretty=%h)'
### alias gk='\gitk --all --branches &!'
### alias gke='\gitk --all $(git log --walk-reflogs --pretty=%h) &!'
###compdef _git gk='command gitk'
###compdef _git gke='command gitk'
alias nv="nvim"
alias neovim="nvim"

### FZF CONFIGURATION/ADDONS

# FZF nord color scheme
export FZF_DEFAULT_OPTS="
  --no-height
  --color=fg:#e5e9f0,bg:#3b4252,hl:#81a1c1
  --color=fg+:#e5e9f0,bg+:#3b4252,hl+:#81a1c1
  --color=info:#eacb8a,prompt:#bf6069,pointer:#b48dac
  --color header:italic
  --color=marker:#a3be8b,spinner:#b48dac,header:#a3be8b"
export WINHOME="/mnt/c/Users/zaccs/"


## @FIXME
## pycharm ssh - only run if on local machine
#if [[ "$(echo $HOSTNAME | egrep -ci 'DESKTOP')" -ge 1 ]]; then
#	if [ -z "$SSH_AUTH_SOCK" ]; then
#	    # Check for a currently running instance of the agent
#	    RUNNING_AGENT="`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`"
#	    if [ "$RUNNING_AGENT" = "0" ]; then
#		# Launch a new instance of the agent
#        echo '# test below:'
#		ssh-agent -s  | tee $HOME/.ssh/ssh-agent 2>/dev/null
#	    fi
#	    eval `cat $HOME/.ssh/ssh-agent 2> /dev/null` > /dev/null
#	    ssh-add $HOME/.ssh/id_rsa 1> /dev/null
#	fi
#fi

#alias sshCachePP="eval $(ssh-agent) && ssh-add $HOME/.ssh/id_rsa"
sshCachePP(){
    eval $(ssh-agent) && ssh-add "$HOME/.ssh/id_rsa"
}


## Add Git branch info to BASH prompt (source: https://bash-prompt-generator.org/)
#PROMPT_COMMAND='PS1_CMD1=$(git branch --show-current 2>/dev/null)'; PS1='\n\[\e[38;5;115m\]\u@\h\n\[\e[38;5;152m\]\w\[\e[0m\]  \[\e[38;5;223;3m\]${PS1_CMD1}\[\e[0m\]  \n \[\e[38;5;139;3m\]>\[\e[0m\] '


## XDG Exports
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_BIN_HOME="$HOME/.local/bin"
export XDG_DOWNLOADS_HOME="$HOME/.local/var/data/downloads"

# @TEMPFIX
alias gpunb="gp -u origin $(git branch --show-current)"

llr(){
	# use CWD if no path specified
	if [ -z $1 ]; then
		DIRROOT="$(pwd)"
	else
		DIRROOT="$1"
	fi
	#echo "ECHO TEST: ls -lR $DIRROOT | grep '^l' "
	ls -lR $DIRROOT | grep '^l' 
	
}

# recursive symlink lister
llr(){
	# use CWD if no path specified
	if [ -z $1 ]; then
		DIRROOT="$(pwd)"
	else
		DIRROOT="$1"
	fi
	#echo "ECHO TEST: ls -lR $DIRROOT | grep '^l' "
	ls -lR $DIRROOT | grep '^l' 
	
}
export XDG_ASUS_HOME="/mnt/c/Users/zaccs/Desktop"
alias jdesktoppersonal="cd /mnt/c/Users/zaccs/Desktop/Personal"
alias ASUS_ZACCSOR_DESKTOP_PERSONAL="cd /mnt/c/Users/zaccs/Desktop/Personal"

# SOURCE DOTFILES BASH COMPLETION SCRIPTS 
bashcomps(){
    COMP_DIR="$HOME/dotfiles/bash.d/completers"

    # ignore patterns for broken/experimental completion scripts
    # need to add place holder pattern if no patterns are currently
    # being ignored as temp. workaround
    IGNORE_REGX="fallback"

    for x in $(find $COMP_DIR -type f); do
        # skip sourcing if matches ignore regex
        if [ $(echo $x | egrep -ci "$IGNORE_REGX") -ge 1 ]; then
            continue
        fi
        source "$x"
    done
}
bashcomps

# Source WSL configs if working on local machine
if [[ "$HOSTNAME" = "DESKTOP-FPDD922" ]]; then
    WSL_DOTFILES_HOME="$HOME/dotfiles/wsl"
    for srcfile in $(find "$WSL_DOTFILES_HOME/lib" -type f -name '*.wsl'); do
        source "$srcfile" || echo 'Error unable to source: ' "$srcfile" 
    done
fi

# on-the-fly sourcing for experimental bash configurations
bashexpr(){
	# TODO - Improve logic to accept/source some but not all experimental
	# configuration file FLAGS.
	#
	# Function accepts 1 (at the moment) CLI ARG, if given it 
	# checks which experimental bashconfig matches flag and
	# sources the file. Otherwise if no FLAG is given 
	# all bashconfig experimental files are sourced.
	#

	BASHD_EXPERIMENTAL_HOME="$HOME/dotfiles/bash.d/lib/expr"
	case $1 in 
		a|alias)
			# use bash if "source" returns error when calling after shell login initaliziation
			#bash "$BASHD_EXPERIMENTAL_HOME/alias.bash"
			source "$BASHD_EXPERIMENTAL_HOME/alias.bash"
			echo "The experimental alias.bash has been successfully sourced"
			;;

		f|funct|functs|function|F)
			#bash "$BASHD_EXPERIMENTAL_HOME/functs.bash"
			source "$BASHD_EXPERIMENTAL_HOME/functs.bash"
			echo "The experimental functs.bash has been successfully sourced"
			;;

		e|export|exports|E)
			#bash "$BASHD_EXPERIMENTAL_HOME/exports.bash"
			source "$BASHD_EXPERIMENTAL_HOME/exports.bash"
			echo "The experimental exports.bash has been successfully sourced"
			;;

		p|prompt|P)
			#bash "$BASHD_EXPERIMENTAL_HOME/prompt.bash"
			source "$BASHD_EXPERIMENTAL_HOME/prompt.bash"
			echo "The experimental prompt.bash has been successfully sourced"
			;;
		**)
			for expr_file in $(find "$BASHD_EXPERIMENTAL_HOME" -type f); do 
				source $expr_file
			done
			;;
	esac
}
