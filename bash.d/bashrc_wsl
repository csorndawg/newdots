# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

### BASH shell >> SH shell
#if  [ ! -z "/bin/bash" ]; then
#	echo 'BASH installed on current machine. Current shell will be changed to BASH if currently set to SH'
#	SHELL="/bin/bash"
#fi
#

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# PRESET
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
	PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	;;
*) ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto'
	#alias dir='dir --color=auto'
	#alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

##################################################
###	ADDITONAL EDITS
##################################################

#####
##### SOURCE STANDARD DOTFILE RC/BASH.D CONFIGURATIONS FIRST
##### SO ANY WSL LOGIC IS NOT OVERWRITEN
#####

# RC - SHARED BASH/ZSH CONFIGURATIONS
source ~/dotfiles/rc.d/aliases.rc 2>/dev/null
source ~/dotfiles/rc.d/aliases_experimental.rc 2>/dev/null
source ~/dotfiles/rc.d/exports.rc #2>/dev/null
source ~/dotfiles/rc.d/functions.rc || echo "Error occurred while sourcing rc.d/functions file"

# BASH ONLY CONFIGS
source ~/dotfiles/bash.d/functions.bash 1>/dev/null
source ~/dotfiles/bash.d/exports.bash 1>/dev/null
source ~/dotfiles/bash.d/experimental.bash 1>/dev/null
source ~/dotfiles/bash.d/prompt.bash 1>/dev/null
source ~/dotfiles/bash.d/aliases.bash 1>/dev/null

#####
##### WSL2 BASH SPECIFIC LOGIC/CONFIGURATIONS
#####

# Update $PATH
PATH="$PATH::$HOME/.local/bin"
PATH="$HOME/git/dataops_bible/bin:$HOME/git/dataops_bible/scripts:$HOME/git/toolbox/bin:$PATH"

# personal/custom type folders to add to $PATH
SECRETS_BIN="$HOME/git/fortknox/bin"
#TESTS_BIN="$HOME/.local/var/tmp/bin"
ZLIB_BIN="$HOME/git/zlib/bin"
PATH_ADDONS="$SECRETS_BIN:$ZLIB_BIN"
PATH="$PATH:$PATH_ADDONS"
alias python=python3

alias ta="task add"
alias tl="task list"

# quick backup function
# works with all files and dumps them to an unsorted directory
# note this dir should be monitored so it doesnt ballon in size
# as of now no protective logic exists, but plan on adding logic or
# cronjob to delete stale versions (>5 copies AND older than 1month) --> TODO
mk_artifact() {
	TARG="$1"
	TARG_NAME="$(basename $TARG)"
	TIMESTAMP=$"(date +%Y%m%d_%H%M%S_%Z)"
	# TODO - logic to check if abs or relative path ; for now assume relativee
	ART_DIR="$HOME/.local/var/backups/auto"

	# TODO - handle directories logic
	echo rsync -azvh $TARG "$ART_DIR/$TARG_NAME_$TIMESTAMP"
	rsync -azvh $TARG "$ART_DIR/$TARG_NAME_$TIMESTAMP"
}
alias cht='cht.sh'
alias jc="jupyter console"
if [ -f "$HOME/.local/bin/lib/comp/bash/cht.sh" ]; then
	source "$HOME/.local/bin/lib/comp/bash/cht.sh"
fi

# ssh tunneling funct
ssh_tunnel() {
	# optional local port
	REMOTE_PORT="$1"
	if [[ -z "$2" ]]; then
		LOCAL_PORT="$1"
	else
		LOCAL_PORT="$2"
	fi
	# default ssh user/host
	SSH_CONN="$3"
	if [[ -z "$3" ]]; then
		SSH_CONN="shelby"
	fi
	echo "ssh -L $REMOTE_PORT:localhost:$LOCAL_PORT $SSH_CONN"
	ssh -L $REMOTE_PORT:localhost:$LOCAL_PORT "$SSH_CONN"
}

export BAT_THEME="Nord" # @TODO: move to bat.config and remove

## HISTORY

### increase shell history
HISTSIZE=100000
HISTFILESIZE=100000

### Save multi-line commands as one command
shopt -s cmdhist

### Re-edit the command line for failing history expansions
shopt -s histreedit

### Re-edit the result of history expansions
shopt -s histverify

### save history with newlines instead of ; where possible
shopt -s lithist

### Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

### Don't record some commands
HISTIGNORE="exit:ls:bg:fg:history:clear"

HISTTIMEFORMAT=$'\033[31m[%F] \033[36m[%T]\033[0m '

### GIT

###
### Functions
###

## The name of the current branch
## Back-compatibility wrapper for when this function was defined here in
## the plugin, before being pulled in to core lib/git.zsh as git_current_branch()
## to fix the core -> git plugin dependency.
function current_branch() {
	git_current_branch
}

### The list of remotes
function current_repository() {
	if ! $_omb_git_git_cmd rev-parse --is-inside-work-tree &>/dev/null; then
		return
	fi
	_omb_util_print $($_omb_git_git_cmd remote -v | cut -d':' -f 2)
}

### Warn if the current branch is a WIP
function work_in_progress() {
	if $(git log -n 1 | grep -q -c "\-\-wip\-\-"); then
		_omb_util_print "WIP!!"
	fi
}

### Check for develop and similarly named branches
function git_develop_branch() {
	command git rev-parse --git-dir &>/dev/null || return
	local branch
	for branch in dev devel development; do
		if command git show-ref -q --verify refs/heads/"$branch"; then
			_omb_util_print "$branch"
			return
		fi
	done
	_omb_util_print develop
}

### Check if main exists and use instead of master
function git_main_branch() {
	# send STDERR to /dev/null to prevent not in git repo dotfiles startup error
	command git rev-parse --git-dir 2 &>/dev/null || return
	local ref
	for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
		if command git show-ref -q --verify "$ref"; then
			_omb_util_print "${ref##*/}"
			return
		fi
	done
	_omb_util_print master
}

alias nv="nvim"
alias neovim="nvim"
export WINHOME="/mnt/c/Users/zaccs/"

# @TEMPFIX
alias gpunb="gp -u origin $(git branch --show-current 2>/dev/null)"

llr() {
	# use CWD if no path specified
	if [ -z $1 ]; then
		DIRROOT="$(pwd)"
	else
		DIRROOT="$1"
	fi
	#echo "ECHO TEST: ls -lR $DIRROOT | grep '^l' "
	ls -lR $DIRROOT | grep '^l'

}

# recursive symlink lister
llr() {
	# use CWD if no path specified
	if [ -z $1 ]; then
		DIRROOT="$(pwd)"
	else
		DIRROOT="$1"
	fi
	#echo "ECHO TEST: ls -lR $DIRROOT | grep '^l' "
	ls -lR $DIRROOT | grep '^l'

}
export XDG_ASUS_HOME="/mnt/c/Users/zaccs/Desktop"
alias dsktp="cd /mnt/c/Users/zaccs/Desktop/Personal"

# SOURCE DOTFILES BASH COMPLETION SCRIPTS
bashcomps() {
	COMP_DIR="$HOME/dotfiles/bash.d/completers"

	# ignore patterns for broken/experimental completion scripts
	# need to add place holder pattern if no patterns are currently
	# being ignored as temp. workaround
	IGNORE_REGX="fallback"

	for x in $(find $COMP_DIR -type f); do
		# skip sourcing if matches ignore regex
		if [ $(echo $x | egrep -ci "$IGNORE_REGX") -ge 1 ]; then
			continue
		fi
		source "$x"
	done
}
bashcomps

# Source WSL configs if working on local machine
if [[ "$HOSTNAME" = "DESKTOP-FPDD922" ]]; then
	WSL_DOTFILES_HOME="$HOME/dotfiles/wsl"
	for srcfile in $(find "$WSL_DOTFILES_HOME/lib" -type f -name '*.wsl'); do
		source "$srcfile" || echo 'Error unable to source: ' "$srcfile"
	done
fi

# on-the-fly sourcing for experimental bash configurations
bashexpr() {
	# TODO - Improve logic to accept/source some but not all experimental
	# configuration file FLAGS.
	#
	# Function accepts 1 (at the moment) CLI ARG, if given it
	# checks which experimental bashconfig matches flag and
	# sources the file. Otherwise if no FLAG is given
	# all bashconfig experimental files are sourced.
	#

	BASHD_EXPERIMENTAL_HOME="$HOME/dotfiles/bash.d/lib/expr"
	case $1 in
	a | alias)
		# use bash if "source" returns error when calling after shell login initaliziation
		#bash "$BASHD_EXPERIMENTAL_HOME/alias.bash"
		source "$BASHD_EXPERIMENTAL_HOME/alias.bash"
		echo "The experimental alias.bash has been successfully sourced"
		;;

	f | funct | functs | function | F)
		#bash "$BASHD_EXPERIMENTAL_HOME/functs.bash"
		source "$BASHD_EXPERIMENTAL_HOME/functs.bash"
		echo "The experimental functs.bash has been successfully sourced"
		;;

	e | export | exports | E)
		#bash "$BASHD_EXPERIMENTAL_HOME/exports.bash"
		source "$BASHD_EXPERIMENTAL_HOME/exports.bash"
		echo "The experimental exports.bash has been successfully sourced"
		;;

	p | prompt | P)
		#bash "$BASHD_EXPERIMENTAL_HOME/prompt.bash"
		source "$BASHD_EXPERIMENTAL_HOME/prompt.bash"
		echo "The experimental prompt.bash has been successfully sourced"
		;;
	**)
		for expr_file in $(find "$BASHD_EXPERIMENTAL_HOME" -type f); do
			source $expr_file
		done
		;;
	esac
}

# shellGPT setup
source "$HOME/dotfiles/bash.d/lib/shellGPT_conf.bash"

## @IMPORTANT: DO NOT MODIFY BELOW FUNCTIONS
#  All "add_*_ssh_pp" functions are responsible for caching a passphrase
#  for frequently used SSH key. Do not modify unless long-term solution.

# caches id_rsa passphrase
function add_rsa_ssh_pp {

	SSH_SECRET_BIN="$HOME/git/fortknox/bin/"
	PASSPHRASE_CACHE_SCRIPT_NAME="run_add_key"
	SSH_PASSPHRASE_CACHE_SCRIPT_PATH="$SSH_SECRET_BIN/$PASSPHRASE_CACHE_SCRIPT_NAME"
	source $SSH_PASSPHRASE_CACHE_SCRIPT_PATH
}

# caches id_rsa_linode passphrase
function add_rsa_linode_ssh_pp {

	SSH_SECRET_BIN="$HOME/git/fortknox/bin/"
	PASSPHRASE_CACHE_SCRIPT_NAME="run_add_key_linode"
	SSH_PASSPHRASE_CACHE_SCRIPT_PATH="$SSH_SECRET_BIN/$PASSPHRASE_CACHE_SCRIPT_NAME"
	bash $SSH_PASSPHRASE_CACHE_SCRIPT_PATH
}

## call ssh passphrase caching functions
add_rsa_ssh_pp 1>/dev/null
add_rsa_linode_ssh_pp 1>/dev/null

## DOTFILE CONFIG.D FILES
source "$HOME/dotfiles/config.d/fzf/fzf.config" 1>/dev/null

source_bashrc_custom_comp_modules() {
	BASH_CUSTOM_COMP_DIR="$HOME/dotfiles/bash.d/lib/custom/comps"
	SRC_FILE_LIST=$(find $BASH_CUSTOM_COMP_DIR -type f -not -path '*/test*')
	IGNORE_LIST=(fzf_comp_expr)
	for comp_file in $SRC_FILE_LIST; do
		compf=$(basename $comp_file | cut -f 1 -d '.') # get compfile name to test if in ignore list
		for ignr in ${IGNORE_LIST[@]}; do
			match_exists=$(echo $compf | egrep -c "$ignr")
			if [[ match_exists -ge 1 ]]; then
				#echo "$compf matches IGNORE_LIST pattern and will not be sourced"
				continue
			else
				#echo "source $comp_file 1> /dev/null"
				source $comp_file
			fi
		done
	done
} 1>/dev/null
source_bashrc_custom_comp_modules

# TODO: update go install script to add below env/exports
# from go installer pb
export GOPATH="$HOME/.local/share/go/workspace"
export GOROOT="$HOME/.local/share/go/root"
export GOBIN="$GOROOT/bin"
export PATH="$PATH:$GOBIN"
#export PATH="$PATH:$GOBIN:$GOPATH"
export PATH="$PATH:$HOME/.cargo/env"

# cargo/rustup install
source $HOME/.cargo/env
export PATH="$PATH:$HOME/.cargo/bin"
