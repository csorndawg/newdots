# Runtime functions

# git diff HEAD <X>  where X is 1 by default
gdfhx() {
	if [ -z "$1" ]; then
		X=1
	else
		X="$1"
	fi
	git diff HEAD~$X
}

mcd() {
	DIRPATH="$1"
	mkdir -p $DIRPATH && cd $DIRPATH
}

# quickly tweak rc shell configs
# useage: rce <config file flag>
# config file flags: {a: alias} {e: exports} {f: functions} {i: idea}
rce() {
	RC_DIR="/home/nukk/git/ongoing/newdots/rc.d/"
	# TODO: convert to CASE statement
	if [[ -z "$1" ]]; then
		vim "$RC_DIR"
	elif [[ "$1" = "a" ]]; then
		vim "$RC_DIR/aliases.rc"
	elif [[ "$1" = "e" ]]; then
		vim "$RC_DIR/exports.rc"
	elif [[ "$1" = "f" ]]; then
		vim "$RC_DIR/functions.rc"
	elif [[ "$1" = "c" ]]; then
		vim "$RC_DIR/configd.rc"
	elif [[ "$1" = "i" ]]; then
		vim "$RC_DIR/ideas.rc"
	else
		echo "Error"
	fi
}

# TODO: make version of this to quickly select folder to save existing file
# TODO Example:  <quick save function> <file> ->> brings up fzf prompt and from FZF prompt destination location selected ->> script saves <file> at <fzf selected dir>

# TODO: integrate FZF so file can be saved from FZF selection instead of location from predefined array
# quickly add tmp file to one of handful locations
# useage: tmpp <config file flag>
# config file flags: {a: archive} {d: dump} {n: note} {s: sandbox}  {u: unsorted}
tmpp() {
	TMP_DIR="$HOME/quick/tmp"
	# TODO: convert to CASE statement
	if [[ -z "$1" ]]; then
		vim "$TMP_DIR/quick-$(date +%Y%M%D-%H%M%S).md"

	elif [[ "$1" = "a" ]]; then
		TMP_DIR="$TMP_DIR/archive"

	elif [[ "$1" = "d" ]]; then
		TMP_DIR="$TMP_DIR/data/"

	elif [[ "$1" = "n" ]]; then
		TMP_DIR="$TMP_DIR/notes"

	elif [[ "$1" = "s" ]]; then
		TMP_DIR="$TMP_DIR/sandboxes"

	elif [[ "$1" = "u" ]]; then
		TMP_DIR="$TMP_DIR/unsorted"
	else
		echo "Error"
	fi
	vim "$TMP_DIR/quick-$(date +%Y%m%d-%H%M%S).md"
}

venvfreeze() {

	# constants
	LOCAL_VENV_HOME="$XDG_STATE_HOME/python/virtualEnvs"
	CURRENT_VENV_DIR="$(which python3 | sed -E 's/\/bin.+$//g')"
	VENV_NAME="$(basename $CURRENT_VENV_DIR)"

	# gracefully deactivate
	pip freeze | tee $CURRENT_VENV_DIR/requirements.txt
	ln -sf "$CURRENT_VENV_DIR/requirements.txt" "$LOCAL_VENV_HOME/requirements/$VENV_NAME.requirements.txt"
	deactivate
}

# TODO: finish building - need to figure out if rc.d files will get their own flag or if they will be included in single "bundle" flag
# arg map: {z:zshrc} {l:lunarvim} {r:rcdirs?}
# must pass at least 1 args

source_dotfile() {
	# check arg, and depending on arg source relevant file(s)
	echo "Work in progress"
}

# create new test/sandbox folder
# 2 optional arg:
#   1: name of test dir
#   2: cd flag ("y" means, yes cd to newly created dir)
mk_testdir() {
	TEST_HOME_DIR="$HOME/.local/tmp/tests"
	TEST_TEMPLATE_NAME="template1"
	TEST_TEMPLATE_DIRPATH="$TEST_HOME_DIR/$TEST_TEMPLATE_NAME"
	if [[ -n "$1" ]]; then
		NEW_DIR_NAME="$1"
	else
		NEW_DIR_NAME="test-$(date +%Y%m%d_%H%M%S)"
	fi

	# copy template and if "cd" flag enabled cd into new dir
	cp -r $TEST_TEMPLATE_DIRPATH $TEST_HOME_DIR/$NEW_DIR_NAME
	echo "cp -rv   $TEST_TEMPLATE_DIRPATH $TEST_HOME_DIR/$NEW_DIR_NAME"
	test "$2" = "y" && cd $TEST_HOME_DIR/$NEW_DIR_NAME
}

# quickly spinup new venvs
function venvmake() {

	if [ -z "$1" ]; then
		echo "Error, no venv name argument given."
		exit 1
	else
		NAME="$1"
	fi

	# ensure no venvs enabled
	if [[ "$(which python3 | grep -Ec --ignore-case "virtualenv|venv")" -ge 1 ]]; then
		echo "which result: $(which python3)"
		deactivate
	else
		echo "No virtual env. enabled, skipping deactivation step."
	fi

	# make venv path
	LOCAL_VENVS_DIR="$XDG_STATE_HOME/python/virtualEnvs"
	NEW_VENV_PATH="$LOCAL_VENVS_DIR/$NAME"

	# make venv
	python3 -m venv $NEW_VENV_PATH

	# turn on newly created venv
	source "$NEW_VENV_PATH/bin/activate"

	# TODO: add logic to handle requirements.txt arg
	# TODO: add logic to pipstall requirements file if present

	echo ""
	echo "Trial Function: Make VENV Automateer"
}

# dump either urser text string or url to master dumpfile (not suited for anything more complex than single string)
quickdump() {
	# variables
	DUMPFILE="$$HOME/git/fortknox/knowledge_dumpfile_master.md"
	BACKUPFILE="$HOME/.local/session/quickdumps/master_dumpfile.bk"
	DUMPTEXT="$1"

	# smart copy
	cp $DUMPFILE $BACKUPFILE
	echo "" >>$DUMPFILE
	echo "$DUMPTEXT" >>DUMPFILE
}

# mkdir+cd
mcd() {
	mkdir $1 -p
	cd $1
}

ssh-cacher() {
	eval $(ssh-agent) && ssh-add "$HOME/.ssh/id_rsa"
}

## ====================================
##  HELPER FUNCTIONS
## ====================================

# FZF branch checkout tool
gcof() {
	# verbose flag passed, needed for checking origin/<BRANCH>
	if [[ $1 = "v" ]]; then
		echo "Verbose flag passed, included origin/remote branches as well."
		echo ""
		git branch -va | awk -F' ' '{print $1}' | rg -v "\*" |
			fzf -1 | awk -F 'remotes/' '{print $2}' |
			xargs -I "{}" git checkout "{}"

	else
		echo "No flag passed, only local branches will be used."
		git branch -v | awk -F' ' '{print $1}' | rg -v "\*" |
			fzf -1 | xargs -I "{}" git checkout "{}"
	fi
}

# @TODO - add nvim/kickstart/git[ignore/config] handling
# edit dotfiles (each maps to dotfile tech)
# args: z,v,k,n,t,gi,gc,b
edot() {

	# validate input
	if [[ -z "$1" ]]; then
		echo "Error - required argument missing."
		exit 1
	fi

	case $1 in
	# bashrc
	b)
		echo "BASHRC argument passed"
		vim "$HOME/.bashrc"
		;;
	t)
		echo "TMUX.CONF argument passed"
		vim "$HOME/.tmux.conf"
		;;
	v)
		echo "VIMRC argument passed"
		vim "$HOME/.vimrc"
		;;
	z)
		echo "TMUX.CONF argument passed"
		vim "$HOME/.zshrc"
		;;
	*)
		echo "Required argument missing. Valid arguments are b, t, v, z."
		;;
	esac

}

## =============================================
## ON-THE-FLY DOTFILE EDITING FUNCTION
## =============================================

edf() {

	# function must be given an ARG when called
	# ARG must map to one of the below "file flags"
	#
	# function edits:
	#   - bashrc (b)
	#   - bashrc_wsl (bw)
	#   - vimrc (v)
	#   - vim_lib (vl)
	#   - init.lua (n)
	#   - neovim plugins (np)
	#   - neovim extras (nx)
	#   - neovim users (nu)
	#   - tmux.conf (t)
	#   - gitconfig (g)

	# DOTFILE path depends on host machine
	if [[ "$(echo $HOSTNAME | egrep -ci 'DESKTOP')" -ge 1 ]]; then
		DOTFILE_HOME_DIR="$HOME/dotfiles"
		echo "Current session is running on my Local machine - $HOSTNAME"
	else
		DOTFILE_HOME_DIR="$HOME/dotfiles"
	fi
	echo "DOTFILE_HOME_DIR:  $DOTFILE_HOME_DIR"

	case $1 in
	b)
		vim "$DOTFILE_HOME_DIR/bash.d/bashrc"
		;;
	bw)
		vim "$DOTFILE_HOME_DIR/bash.d/bashrc_wsl"
		;;
	t)
		vim "$DOTFILE_HOME_DIR/tmux.d/tmux.conf"
		;;
	g)
		vim "$DOTFILE_HOME_DIR/git.d/gitconfig"
		;;
	ni)
		vim "$DOTFILE_HOME_DIR/nvim.d/init.lua"
		;;
	nx)
		vim "$DOTFILE_HOME_DIR/nvim.d/lua/extra"
		;;
	nu)
		vim "$DOTFILE_HOME_DIR/nvim.d/lua/user"
		;;
	np)
		vim "$DOTFILE_HOME_DIR/nvim.d/lua/plugins"
		;;
	v)
		vim "$DOTFILE_HOME_DIR/vim.d/vimrc"
		;;
	vl)
		vim "$DOTFILE_HOME_DIR/vim.d/vim_lib"
		;;
	**)
		echo 'Unrecognized $ARG passed'
		;;
	esac
}

## qxs - (Q)ui(X) (S)cratch file genertor
qxs() {

	# function must be given an ARG when called
	# ARG must map to one of the below scratch "file flags"
	#
	# function edits:
	#   - bash sandbox (b)
	#   - python sandbox (p)
	#   - dotfiles sandbox (d)
	#   - sql sandbox (s)
	#   - testing sandbox ()
	#   - junk sandbox (j)      ## @TODO - create script to auto remove files from folder after X time (> 1 week)
	#   - git sandbox (g)
	#   - written txt/markdown notes (w)   ## 'w' for written, use 'h' for human/help if 'w' taken
	#

	## variables
	SANDBOXES_HOME_DIR="$HOME/.local/var/sandboxes"
	TEXTFILES_HOME_DIR="$HOME/git/kb2/quick/autostash" # diff location for written notes/docs

	mkdir -p $SANDBOXES_HOME_DIR

	# set EDITOR to vim as fallback if DNE
	#[ -z "$EDITOR" ] && EDITOR=vim

	#    # scalably add/remove/modify variables dirpaths
	#    VAR_LIST=($SANDBOXES_HOME_DIR $TEXTFILES_HOME_DIR)
	#    for varx in ${VAR_LIST[@]}; do
	#        [[ -d "$varx" ]] || mkdir -p "$varx"
	#        mkdir -p $varx
	#    done

	## make subdirs first
	SUBDIRS=(bash python dotfiles git sql junk testing all)
	for sd in ${SUBDIRS[@]}; do
		mkdir -p "$SANDBOXES_HOME_DIR/$sd"
		echo mkdir -p "$SANDBOXES_HOME_DIR/$sd"
	done

	# @TODO - Add upper/lower case variations to CASE statement for existing flags
	# @TODO - Add separate logic for reopening recent/existing scratch file use case
	# create scratchfile from CASE statement flag input
	case "$1" in

	b | B | bash | sh | shell)
		echo -n "Bash/Shell sandbox FLAG passed"
		mkdir -p "$SANDBOXES_HOME_DIR/bash"
		$EDITOR "$SANDBOXES_HOME_DIR/bash/bash_scratch_$(date +%Y%m%d-%H%M%S).sh"
		;;

	p | P | python)
		echo -n "Python sandbox FLAG passed"
		mkdir -p "$SANDBOXES_HOME_DIR/python"
		$EDITOR "$SANDBOXES_HOME_DIR/python/python_scratch_$(date +%Y%m%d-%H%M%S).py"
		;;

	d | dotfiles)
		echo -n "Dotfile sandbox FLAG passed. Append extension manually if filetype extention needed."
		mkdir -p "$SANDBOXES_HOME_DIR/dotfiles"
		$EDITOR "$SANDBOXES_HOME_DIR/dotfiles/dotfile_scratch_$(date +%Y%m%d-%H%M%S).dotfile"
		;;

	g | git)
		echo -n "Git sandbox FLAG passed"
		mkdir -p "$SANDBOXES_HOME_DIR/git"
		$EDITOR "$SANDBOXES_HOME_DIR/git/git_scratch_$(date +%Y%m%d-%H%M%S).git"
		;;

	j | junk | temp | tmp | quick | q | J)
		echo -n "Junk/Quick/Temp sandbox FLAG passed. Append extension manually if filetype extention needed."
		mkdir -p "$SANDBOXES_HOME_DIR/junk"
		$EDITOR "$SANDBOXES_HOME_DIR/junk/junk_scratch_$(date +%Y%m%d-%H%M%S).junk"
		;;

	t | test | explore | experiment | exp)
		echo -n "Test/Experiment/Explore sandbox FLAG passed. Append extension manually if filetype extention needed."
		mkdir -p "$SANDBOXES_HOME_DIR/testing"
		$EDITOR "$SANDBOXES_HOME_DIR/testing/test_scratch_$(date +%Y%m%d-%H%M%S).test"
		;;

	s | sql)
		echo -n " sandbox FLAG passed"
		mkdir -p "$SANDBOXES_HOME_DIR/sql"
		$EDITOR "$SANDBOXES_HOME_DIR/sql/sql_scratch_$(date +%Y%m%d-%H%M%S).sql"
		;;

	w | h)
		echo -n "Written/Help FLAG passed"
		mkdir -p "$TEXTFILES_HOME_DIR/qxs"
		$EDITOR "$TEXTFILES_HOME_DIR/qxs/doc_scratch_$(date +%Y%m%d-%H%M%S).md"
		;;

	*)
		echo -n "Unknown/Unspecified which defaults to ALL"
		mkdir -p "$SANDBOXES_HOME_DIR/all"
		$EDITOR "$SANDBOXES_HOME_DIR/all/all_scratch_$(date +%Y%m%d-%H%M%S).all"
		;;
	esac
}

mk_venv() {
	VENV_NAME="$1"
	VENV_PREFIX="venv"
	VENV_NEW="$VENV_PREFIX-$VENV_NAME"
	VENV_HOME_DIR="$HOME/.local/state/python/venvs/"

	# disable Venv if enabled
	if [[ $(which python3 | egrep -c "state.+venvs") -ge 1 ]]; then
		deactivate
	fi

	# check for existing safeguards
	if [[ ! -d $VENV_HOME_DIR ]]; then
		mkdir -p $VENV_HOME_DIR

	# source existing if present
	elif [[ -d $VENV_NEW ]]; then
		echo "A virtual env. named $VENV_NEW already exists and will be sourced instead"
		source $VENV_NEW/bin/activate

	# otherwise create Venv
	else
		cd $VENV_HOME_DIR
		python3 -m venv "$VENV_NEW"
		source $VENV_NEW/bin/activate
		cd -
	fi

}

# FZF broken keybinding workaround
fzz() {
	# Accepts 1 required ARG which matches one of the expected CASE statement
	# conditionals, and allows a 2nd optional ARG.
	#   Required $ARG1 indicates what action the user wants to do with the FZF selection(s).
	#   Optional $ARG2 specifies if FZF will allow for MULTIPLE (default) or SINGLE selection/FZF output

	# FZF single X. multiple output handling
	#	if [[ -n "$2" ]]; then
	#		echo "No additional arguments were passed, therefore all selections will be returned."
	#		allowsMultipleSelectionsFlag="True"
	#	else
	#		echo "The 'single selection' flag was passed, therefore only 1 FZF selection will be returned."
	#		allowsMultipleSelectionsFlag="False"
	#	fi

	# START OF CASE STATEMENT
	case $1 in

	# open FZF selections in EDITOR
	"open" | o | "edit" | "ed")
		echo "All FZF selections will be opened with '$EDITOR' "
		selected_files=$(fzf --multi --preview "cat {}" --bind 'ctrl-a:select-all' --prompt="Select files: " --exit-0)

		if [[ ! -n "$selected_files" ]]; then
			echo "No files selected."
			exit 0
		fi

		# add selected files to var
		SF_STR=""
		for sf in $selected_files; do
			SF_STR="$SF_STR $sf"
		done

		echo "" && echo "Selected Files:  $SF_STR"
		echo $EDITOR $(echo $SF_STR)
		$EDITOR $(echo $SF_STR)
		;;

	# view FZF selections in system pager
	"view" | vw | v | V)
		echo "All FZF selections will be opened with '$EDITOR' "
		selected_files=$(fzf --multi --preview "cat {}" --bind 'ctrl-a:select-all' --prompt="Select files: " --exit-0)

		if [[ -z "$selected_files" ]]; then
			echo "No files selected."
			exit 0
		fi

		SF_STR=""
		for sf in $selected_files; do
			SF_STR="$SF_STR $sf"
		done
		echo "" && echo "Selected Files:  $SF_STR"

		# @NOTE: For now running default "bat" if present. Adding extra logic to pass various flags on
		# the fly might be useful.
		# Use LESS if BAT not available
		if [[ "$(whereis bat | egrep -c 'bat\b')" -le 0 ]]; then
			echo "BAT not installed on system, falling back to LESS"
			less -R $(echo $SF_STR)
		else
			bat $(echo $SF_STR)
		fi
		;;

	# echo selected files to STDOUT
	"print" | "echo" | e | E | p | P)
		selected_files=$(fzf --multi --preview "cat {}" --bind 'ctrl-a:select-all' --prompt="Select files: " --exit-0)
		if [[ ! -n "$selected_files" ]]; then
			echo "No files selected"
			exit 0
		else
			echo "" && echo "The below files were selected:"
		fi
		for sf in $selected_files; do
			echo "$sf"
		done
		;;

	"remove" | "delete" | del | d | D | r | R)
		selected_files=$(fzf --multi --preview "cat {}" --bind 'ctrl-a:select-all' --prompt="Select files: " --exit-0)

		echo "" && echo "Remove functionality is still being developed" && exit 0
		if [[ -n "$selected_files" ]]; then
			# delete selected files with the system $EDITOR
			printf "%s\0" "$selected_files" | xargs -0 -n1 echo rm -v
		else
			echo "No files selected."
		fi
		;;

	# GIT SUBCOMMANDS

	## GIT CHECKOUT
	"gco" | "gc" | "checkout" | GC | GCO)
		fzf_gbr_selection="$(git branch -la | fzf -s --exit-0)"
		echo "git checkout $(echo "$fzf_gbr_selection")"
		git checkout $(echo "$fzf_gbr_selection")
		;;

	## GIT MERGE
	"gmg" | "gm" | "[gGmMgG]" | "merge")
		fzf_gbr_selection="$(git branch -la | fzf -s --exit-0)"
		echo "git checkout $(echo "$fzf_gbr_selection")"
		git merge $(echo "$fzf_gbr_selection") || echo "An error occurred when merging $fzf_gbr_selection"
		;;
	*)
		echo "Invalid '$ARG' provided. Please rerun."
		;;
	esac
}

# return git repo if CWD belongs to a git repo folder
function whichGitRepo {
	if git_top_level=$(git rev-parse --show-toplevel 2>/dev/null); then
		# Print the basename of the top-level directory
		basename "$git_top_level"
	fi
}

# ------------------------------------------------
# Automatic SSH passphrase prompt functions
# ------------------------------------------------

# automates ssh key passphrase prompts for Git and SSHing across machines
function add_rsa_ssh {
	local SECRETS_EXPECT_SCRIPT_PATH="$HOME/git/fortknox/bin/run_add_key"
	bash "$SECRETS_EXPECT_SCRIPT_PATH" 1>/dev/null
	echo "SSH passphrase cached successfully"
}

function add_rsa_linode_ssh {
	local SECRETS_EXPECT_SCRIPT_PATH="$HOME/git/fortknox/bin/run_add_key_linode"
	bash "$SECRETS_EXPECT_SCRIPT_PATH" 1>/dev/null
	echo "SSH passphrase cached successfully"
}

# @IMPORTANT: For core custom functions, to avoid namesapce collisions/overlap, append an underscore at end (eg. "gdr_()")

# @FIXME: Function echoes the command to STDOUT instead of running the actual command
# 		and spitting out results to STDOUT. After fixing look into adding
#		more logic so it can cover other `git diff` flags like `--staged`
#
# get (g)it (d)iff b/w local branch and its (r)emote equivalent
# pass a "remote" flag (-r) to diff from remote's perspective (remote will be the "new" file)
#
# main branch example:
#	gdr main  	-->  git diff origin/main main
# 	gdr -r main  	-->  git diff main origin/main
function gdr_() {
	local CUR_GBRANCH
	CUR_GBRANCH=$(git branch --show-current)

	# Ensure we're on a valid branch
	if [[ -z "$CUR_GBRANCH" ]]; then
		echo "Error: Not on a valid branch."
		return 1
	fi

	local FUNC_FLAG="${1:-}" # Use first argument, default to empty if not given

	case "$FUNC_FLAG" in
	-r | r | remote)
		echo "git diff $CUR_GBRANCH origin/$CUR_GBRANCH"
		git diff "$CUR_GBRANCH" "origin/$CUR_GBRANCH"
		;;
	"") # Case for no arguments
		echo "git diff origin/$CUR_GBRANCH $CUR_GBRANCH"
		git diff "origin/$CUR_GBRANCH" "$CUR_GBRANCH"
		;;
	*)
		echo "Error: Invalid flag. Use -r, r, or remote."
		return 1
		;;
	esac
}

# show changes from state X commits ago
# 	uses 1 as default if X not given
# 	setting max of 25 commits to simplify logic
function gdhx() {
	local X="${1:-1}" # Default to 1 if no input is given
	local MAX=25

	# Validate input: check if X is an integer and within range
	if ! [[ "$X" =~ ^[0-9]+$ ]] || ((X < 1 || X > MAX)); then
		echo "Error - invalid input provided. Input must be an integer between 1 and 25."
		return 1
	fi

	echo "git diff HEAD~$X"
	git diff HEAD~$X
}

# checkout X most recently checked-out branch
function gcox() {
	local X="${1:-1}" # Default to 1 if no input is given
	local MAX=25

	# Validate input: check if X is an integer and within range
	if ! [[ "$X" =~ ^[0-9]+$ ]] || ((X < 1 || X > MAX)); then
		echo "Error - invalid input provided. Input must be an integer between 1 and 25."
		return 1
	fi

	echo "git checkout @{-$X}"
	git checkout @{-$X}
}

# @TODO: Add "-p" patch flag handling to view actual diff and not summary. For now using "-p" as default case.
# show diff b/w stash X and current work
function gstd() {
	local X="${1:-0}" # Default to 1 if no input is given
	local MAX=25

	# HACK: Cleanup code later. For now using this to recognize that "gstd p" should
	# be "gstd 0 p", instead of throwing an error.
	if [[ $(echo $1 | egrep -c '\b[pPdD]\b') -ge 1 ]]; then
		local X=0
	fi

	# Validate input: check if X is an integer and within range
	if ! [[ "$X" =~ ^[0-9]+$ ]] || ((X < 0 || X > MAX)); then
		echo "Error - invalid input provided. Input must be an integer between 0 and 25."
		return 1
	fi

	# crude $ARG handling for "--patch" flag
	if [[ -z "$2" ]]; then
		echo "No extra flags included when running the command"
		echo git stash show stash@{$X}
		git stash show stash@{$X}

	else
		echo "Patch flag passed after X ago flag"
		ARG2="$2"

		case "$ARG2" in
		[pP] | [dD] | patch | diff | \-p | \-\-p)
			echo "Patch flag passed"
			echo "git stash show -p stash@{$X}"
			git stash show -p stash@{$X}
			;;
		*)
			echo "Unknown argument passed. Assuming it was passed by mistake"
			echo git stash show stash@{$X}
			git stash show stash@{$X}
			;;
		esac
	fi
	echo '' # add extra line break for cleaner output
}

# apply changes from stash X in the stash list
function gsta() {
	local X="${1:-0}" # Default to 1 if no input is given
	local MAX=25

	# Validate input: check if X is an integer and within range
	if ! [[ "$X" =~ ^[0-9]+$ ]] || ((X < 0 || X > MAX)); then
		echo "Error - invalid input provided. Input must be an integer between 1 and 25."
		return 1
	fi

	echo "git stash apply stash@{$X}"
	git stash apply stash@{$X}
}

# add (stage) all files selected in FZF picker - will add a "--dry-run" flag if "-d/d/dryrun" passed as ARG
function fga() {

	# dyrun flag handling logic
	if [[ -n "$1" ]]; then
		case "$1" in
		d | dryrun | \-d | dry\-run | D)
			echo "Dryrun flag passed"
			git ls-files --modified --others --exclude-standard | awk 'BEGIN { OFS=";"} {print $2, $1}' |
				fzf --bind 'ctrl-o:toggle-all' -m | xargs -I "{}" echo "{}" | cut -f 1 -d ';' |
				xargs -I "{}" git add --dry-run "{}"
			return 0
			;;
		*)
			echo "Error - unrecognized flag passed."
			exit 1
			;;
		esac
	fi

	# no dryrun flag given, proceed with staging selections
	git ls-files --modified --others --exclude-standard | fzf --header '<Ctrl-o> select all' --bind 'ctrl-o:toggle-all' -m | xargs -I "{}" git add "{}"
 
	# show currently staged files
	echo "Git status after function:" && echo ""
	git status | sed -n '/Changes to be committed:/, /Changes not staged for commit:/ { /Changes not staged for commit:/!p }'
}

# restore/ restore and unstaged all files picked in FZF picker
function fz_grs() {

	# dyrun flag handling logic
	if [[ -n "$1" ]]; then
		case $1 in
		s | staged | cached | S)
			echo "Restore staged files"
			git ls-files --modified --exclude-standard | fzf -m | xargs -I "{}" echo "{}" |
				xargs -I "{}" git restore --staged "{}"
			exit 0
			;;
		*)
			echo "Error - unrecognized flag passed."
			exit 1
			;;
		esac
	fi

	# no dryrun flag given, proceed with staging selections
	git ls-files --modified --exclude-standard | fzf -m | xargs -I "{}" git restore "{}"

	# show currently staged files
	git status
}

# use fzf to select git merge branch
function fz_gm() {

	# check/handle "--no-ff" flag
	if [[ -n "$1" ]]; then
		echo "Flag passed alongside function. Assuming '--no-ff' flag is desired."
		# TODO: add pipeline cmd with flag after testing
		#git branch --all --sort=-committerdate | h10 | egrep -v "\*|HEAD" | tr -d ' ' | sed 's|^remotes\/||g' | fzf -1 | xargs -I "{}" git merge --no-ff {}
	fi
	git branch --all --sort=-committerdate | h10 | egrep -v "\*|HEAD" | tr -d ' ' | sed 's|^remotes\/||g' | fzf -1 | xargs -I "{}" git merge {}

}

# use for on-the-fly resetting of files, useful for testing and logging files
function wipe_file() {
	if [[ ! -n "$1" ]]; then
		echo "Error - file ARG required."
		return 1
	else
		INFILE="$1"
	fi

	echo "" >"$INFILE"
}

# on-the-fly shellrc sourcing
function ssrc() {
	local usr_shell=$(basename $(echo $SHELL))
	source "$HOME"/."$usr_shell"rc 2>/dev/null || echo "Error - issue occurred when trying to source '."$usr_shell"rc'"
}

# fco30 - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
function fco30() {
	local branches branch
	branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
		branch=$(echo "$branches" |
			fzf --tmux -d $((2 + $(wc -l <<<"$branches"))) +m) &&
		git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# - checkout git branch/tag
fco() {
	local tags branches target
	branches=$(
		git --no-pager branch --all \
			--format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" |
			sed '/^$/d'
	) || return
	tags=$(
		git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}'
	) || return
	target=$(
		(
			echo "$branches"
			echo "$tags"
		) |
			fzf --no-hscroll --no-multi -n 2 \
				--ansi
	) || return
	git checkout $(awk '{print $2}' <<<"$target")
}

# fzf-z integration
# usage:
#  - 'z' with arg acts like normal 'z' command
#  - 'z' with no args returns 'z' results within fzf picker
#  - 'zz' takes the arg from last 'z' command and uses it as filter in fzf picker
#  - ex: 'z git' jumps to match (no fzf picker) then entering 'zz' opens fzf picker with 'z git' path as filter
#unalias z
function z() {
	if [[ -z "$*" ]]; then
		cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
	else
		_last_z_args="$@"
		_z "$@"
	fi
}

function zz() {
	cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}

# alias 'z' to 'j' for smoother workflow
alias j=z
alias jj=zz

# fzf-docker integration

# remove 1 or more docker containers
function drm() {
	docker ps -a | sed 1d | fzf -q "$1" --no-sort -m --tac | awk '{ print $1 }' | xargs -r docker rm {}
}

# @TESTME
# Select a docker container to start and attach to
function da() {
	local cid
	cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')

	[ -n "$cid" ] && docker start "$cid" && docker attach "$cid"
}

# @TESTME
# Select a docker container to start and attach to
function da() {
	local cid
	cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')

	[ -n "$cid" ] && docker start "$cid" && docker attach "$cid"
}

# fzf-kill - kill all selected pids/processes
fkill() {
    local pid 

    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')

    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

    fi  

  for p in ${pid[@]}; do
    echo "p: $p"
  if [ "x$pid" != "x" ]; then
    echo kill -${1:-9} $p
    kill -${1:-9} "$p"
  fi
done
}

# TMUX switch panees
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# dependencies: locate     (sudo dnf install plocate)
cf() {
  local file

  file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        cd -- $file
     else
        cd -- ${file:h}
     fi
  fi
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --header "<C-d> shows a diff of stash against HEAD. <C-b> checks stash out as a branch. <Enter> shows stash contents." \
    --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

