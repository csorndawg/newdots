# Runtime functions 

# git push for new upstream origin 
gpou (){
    git push -u origin $(git branch --show-current)
}


# git diff HEAD <X>  where X is 1 by default
gdfhx (){
    if [ -z "$1" ];
    then
        X=1
    else
        X="$1"
    fi
    git diff HEAD~$X
}


mcd (){
    DIRPATH="$1"
    mkdir -p $DIRPATH && cd $DIRPATH
}


# recache git credentials -- temporary fix until I can find a way to 
# share $SSH_AUTH b/w tmux windows
gcc (){
    eval $(ssh-agent) && ssh-add "$HOME"/.ssh/id_rsa
    git config credential.helper 'cache --timeout=82800'
}

# quickly tweak rc shell configs 
# useage: rce <config file flag>
# config file flags: {a: alias} {e: exports} {f: functions} {i: idea}
rce(){
    RC_DIR="/home/nukk/git/ongoing/newdots/rc.d/"
    # TODO: convert to CASE statement
    if [[ -z "$1" ]];
    then
        vim "$RC_DIR"
    elif [[ "$1" = "a" ]];
    then
        vim "$RC_DIR/aliases.rc"
    elif [[ "$1" = "e" ]];
    then
        vim "$RC_DIR/exports.rc"
    elif [[ "$1" = "f" ]];
    then
        vim "$RC_DIR/functions.rc"
    elif [[ "$1" = "c" ]];
    then
        vim "$RC_DIR/configd.rc"
    elif [[ "$1" = "i" ]];
    then
        vim "$RC_DIR/ideas.rc"
    else
        echo "Error"
    fi
}


# TODO: make version of this to quickly select folder to save existing file 
# TODO Example:  <quick save function> <file> ->> brings up fzf prompt and from FZF prompt destination location selected ->> script saves <file> at <fzf selected dir>

# TODO: integrate FZF so file can be saved from FZF selection instead of location from predefined array
# quickly add tmp file to one of handful locations
# useage: tmpp <config file flag>
# config file flags: {d: dump} {n: note} {w: work} {p: persist} {u: unsorted}
tmpp(){
    TMP_DIR="$HOME/tmp"
    # TODO: convert to CASE statement
    if [[ -z "$1" ]];
    then
        vim "$TMP_DIR/quick-$(date +%Y%M%D-%H%M%S).md"
    elif [[ "$1" = "d" ]];
    then
        TMP_DIR="$TMP_DIR/dumps"
    elif [[ "$1" = "n" ]];
    then
        TMP_DIR="$TMP_DIR/notes"
    elif [[ "$1" = "w" ]];
    then
        TMP_DIR="$TMP_DIR/work"
    elif [[ "$1" = "u" ]];
    then
        TMP_DIR="$TMP_DIR/persist"
    elif [[ "$1" = "u" ]];
    then
        TMP_DIR="$TMP_DIR/unsorted"
    else
        echo "Error"
    fi
    vim "$TMP_DIR/quick-$(date +%Y%m%d-%H%M%S).md"
}

function venvfreeze() {

# constants
LOCAL_VENV_HOME="$XDG_STATE_HOME/python/virtualEnvs"
CURRENT_VENV_DIR="$(which python3  | sed -E 's/\/bin.+$//g')"
VENV_NAME="$(basename $CURRENT_VENV_DIR)"

# gracefully deactivate
pip freeze | tee $CURRENT_VENV_DIR/requirements.txt
ln -sf "$CURRENT_VENV_DIR/requirements.txt" "$LOCAL_VENV_HOME/requirements/$VENV_NAME.requirements.txt"
deactive 
}
