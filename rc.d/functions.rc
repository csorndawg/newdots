# Runtime functions 


# git diff HEAD <X>  where X is 1 by default
gdfhx (){
    if [ -z "$1" ];
    then
        X=1
    else
        X="$1"
    fi
    git diff HEAD~$X
}


mcd (){
    DIRPATH="$1"
    mkdir -p $DIRPATH && cd $DIRPATH
}


# quickly tweak rc shell configs 
# useage: rce <config file flag>
# config file flags: {a: alias} {e: exports} {f: functions} {i: idea}
rce(){
    RC_DIR="/home/nukk/git/ongoing/newdots/rc.d/"
    # TODO: convert to CASE statement
    if [[ -z "$1" ]];
    then
        vim "$RC_DIR"
    elif [[ "$1" = "a" ]];
    then
        vim "$RC_DIR/aliases.rc"
    elif [[ "$1" = "e" ]];
    then
        vim "$RC_DIR/exports.rc"
    elif [[ "$1" = "f" ]];
    then
        vim "$RC_DIR/functions.rc"
    elif [[ "$1" = "c" ]];
    then
        vim "$RC_DIR/configd.rc"
    elif [[ "$1" = "i" ]];
    then
        vim "$RC_DIR/ideas.rc"
    else
        echo "Error"
    fi
}


# TODO: make version of this to quickly select folder to save existing file 
# TODO Example:  <quick save function> <file> ->> brings up fzf prompt and from FZF prompt destination location selected ->> script saves <file> at <fzf selected dir>

# TODO: integrate FZF so file can be saved from FZF selection instead of location from predefined array
# quickly add tmp file to one of handful locations
# useage: tmpp <config file flag>
# config file flags: {a: archive} {d: dump} {n: note} {s: sandbox}  {u: unsorted}
tmpp(){
    TMP_DIR="$HOME/quick/tmp"
    # TODO: convert to CASE statement
    if [[ -z "$1" ]];
    then
        vim "$TMP_DIR/quick-$(date +%Y%M%D-%H%M%S).md"

    elif [[ "$1" = "a" ]];
    then
        TMP_DIR="$TMP_DIR/archive"

    elif [[ "$1" = "d" ]];
    then
        TMP_DIR="$TMP_DIR/data/"

    elif [[ "$1" = "n" ]];
    then
        TMP_DIR="$TMP_DIR/notes"

    elif [[ "$1" = "s" ]];
    then
        TMP_DIR="$TMP_DIR/sandboxes"

    elif [[ "$1" = "u" ]];
    then
        TMP_DIR="$TMP_DIR/unsorted"
    else
        echo "Error"
    fi
    vim "$TMP_DIR/quick-$(date +%Y%m%d-%H%M%S).md"
}

venvfreeze() {

    # constants
    LOCAL_VENV_HOME="$XDG_STATE_HOME/python/virtualEnvs"
    CURRENT_VENV_DIR="$(which python3  | sed -E 's/\/bin.+$//g')"
    VENV_NAME="$(basename $CURRENT_VENV_DIR)"

    # gracefully deactivate
    pip freeze | tee $CURRENT_VENV_DIR/requirements.txt
    ln -sf "$CURRENT_VENV_DIR/requirements.txt" "$LOCAL_VENV_HOME/requirements/$VENV_NAME.requirements.txt"
    deactivate
}


# TODO: finish building - need to figure out if rc.d files will get their own flag or if they will be included in single "bundle" flag
# arg map: {z:zshrc} {l:lunarvim} {r:rcdirs?} 
# must pass at least 1 args

source_dotfile() {
        # check arg, and depending on arg source relevant file(s)
        echo "Work in progress"
}

# create new test/sandbox folder
# 2 optional arg: 
#   1: name of test dir
#   2: cd flag ("y" means, yes cd to newly created dir)
mk_testdir() {
    TEST_HOME_DIR="$HOME/.local/tmp/tests"
    TEST_TEMPLATE_NAME="template1"
    TEST_TEMPLATE_DIRPATH="$TEST_HOME_DIR/$TEST_TEMPLATE_NAME"
    if [[ -n "$1" ]]; then
        NEW_DIR_NAME="$1"
    else
        NEW_DIR_NAME="test-$(date +%Y%m%d_%H%M%S)"
    fi

    # copy template and if "cd" flag enabled cd into new dir
    cp -r   $TEST_TEMPLATE_DIRPATH $TEST_HOME_DIR/$NEW_DIR_NAME
    echo "cp -rv   $TEST_TEMPLATE_DIRPATH $TEST_HOME_DIR/$NEW_DIR_NAME"
    test "$2" = "y" && cd $TEST_HOME_DIR/$NEW_DIR_NAME
}

# quickly spinup new venvs
function venvmake() {

    if [ -z "$1" ];then
        echo "Error, no venv name argument given."
        exit 1
    else
        NAME="$1"
    fi

    # ensure no venvs enabled 
    if [[ "$(which python3 | grep -Ec --ignore-case "virtualenv|venv")" -ge 1 ]]; then
        echo "which result: $(which python3)"
        deactivate
    else
        echo "No virtual env. enabled, skipping deactivation step."
    fi

    # make venv path
    LOCAL_VENVS_DIR="$XDG_STATE_HOME/python/virtualEnvs"
    NEW_VENV_PATH="$LOCAL_VENVS_DIR/$NAME"

    # make venv
    python3 -m venv $NEW_VENV_PATH

    # turn on newly created venv 
    source "$NEW_VENV_PATH/bin/activate"

    # TODO: add logic to handle requirements.txt arg
    # TODO: add logic to pipstall requirements file if present 

    echo ""
    echo "Trial Function: Make VENV Automateer"
 }

# dump either urser text string or url to master dumpfile (not suited for anything more complex than single string)
quickdump(){
    # variables
    DUMPFILE="$$HOME/git/fortknox/knowledge_dumpfile_master.md"
    BACKUPFILE="$HOME/.local/session/quickdumps/master_dumpfile.bk"
    DUMPTEXT="$1"

    # smart copy 
    cp $DUMPFILE $BACKUPFILE
    echo "" >> $DUMPFILE
    echo "$DUMPTEXT" >> DUMPFILE
}

# mkdir+cd
mcd(){
	mkdir $1 -p; cd $1; 
}


ssh-cacher(){
    eval $(ssh-agent) && ssh-add "$HOME/.ssh/id_rsa"
}

## ====================================
##  HELPER FUNCTIONS
## ====================================

# FZF branch checkout tool
gcof(){  
    # verbose flag passed, needed for checking origin/<BRANCH>
    if [[ $1 = "v" ]]; then
        echo "Verbose flag passed, included origin/remote branches as well."
        echo ""
        git branch -va | awk -F' ' '{print $1}' | rg -v "\*" \
            | fzf -1  | awk -F 'remotes/' '{print $2}' \
            | xargs -I "{}" git checkout "{}"

    else
        echo "No flag passed, only local branches will be used."
        git branch -v | awk -F' ' '{print $1}' | rg -v "\*" \
            | fzf -1 | xargs -I "{}" git checkout "{}"
    fi
}

# @TODO - add nvim/kickstart/git[ignore/config] handling
# edit dotfiles (each maps to dotfile tech)
# args: z,v,k,n,t,gi,gc,b
edot(){

    # validate input
    if [[ -z "$1" ]]; then
        echo "Error - required argument missing."
        exit 1
    fi

    case $1 in
    # bashrc
    b)
        echo "BASHRC argument passed"
        vim "$HOME/.bashrc"
        ;;
    t)
        echo "TMUX.CONF argument passed"
        vim "$HOME/.tmux.conf"
        ;;
    v)
        echo "VIMRC argument passed"
        vim "$HOME/.vimrc"
        ;;
    z)
        echo "TMUX.CONF argument passed"
        vim "$HOME/.zshrc"
        ;;
    *)
        echo "Required argument missing. Valid arguments are b, t, v, z."
        ;;
    esac

}
