# Tmux Configurations that are loaded AFTER all TPM plugins are loaded
# 
# NOTE: Breaking into 3 sections for now, but it may be easier and cleaner,to just
# keep as one unsorted section and add comment header for each configuration.

# @TODO: Review <paste> and <copy-mode> keybindings and remove unused/inefficient ones

# ------------------------------------------------
# General/Misc.
# ------------------------------------------------

# ------------------------------------------------
# SETTINGS
# ------------------------------------------------

# shade out non-active panes
setw -g window-active-style bg=black

# ------------------------------------------------
# BINDINGS
# ------------------------------------------------

# 
unbind ,
unbind <
bind < command-prompt -I "#W" { rename-window "%%" }
bind , paste-buffer


# increases resize to 5x default
bind -r C-Left resize-pane -L 5
bind -r C-Down resize-pane -D 5
bind -r C-Up resize-pane -U 5
bind -r C-Right resize-pane -R 5

# use <Alt-Arrow Key> for default resize 
bind -r M-Left resize-pane -L 
bind -r M-Down resize-pane -D 
bind -r M-Up resize-pane -U 
bind -r M-Right resize-pane -R 

# prevent pomodoro plugin from claiming
unbind p
bind p paste-buffer

# ftpane() uses FZF to pick a tmux pane to switch to
bind-key 0 run "tmux split-window -l 12 'bash -ci ftpane'"

# Run ftpane() script in a new vertical (-h) split thats 20% of available space (-l 20%) size <Prefix><C-/>
bind-key C-/ run "tmux split-window -h -l 20% 'bash -ci ftpane'"

# Better Copy-Mode 

# vim-like copy paste remap
bind Escape copy-mode
bind-key -T copy-mode-vi v send -X begin-selection
# bind-key -T copy-mode-vi y send -X copy-selection

# alt. copy/paste selection key binds
# [g]rab selection with 'g' in copy mode 
bind-key -T copy-mode-vi g send -X copy-selection   
bind g paste-buffer 

# <Prefix>g to paste [g]rabbed selection
#bind g paste-buffer -b 0
# BROKEN: bind-key g run-shell "tmux set-buffer -- $(tmux show-buffer); tmux paste-buffer -b 0"
#bind-key C-g run-shell "tmux set-buffer -- $(tmux show-buffer); tmux paste-buffer -b 0"


# overrides 'describe key binding' default command
bind-key -T copy-mode-vi C-/ send -X copy-selection   

## copy-mode <selection> copied to <system clipboard> with 'Y'
## and mode switches back automatically after copying selection
bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"


## copy selection to paste-buffer with 'y' AND stay in copy-mode 
## user must MANUALLY exit copy-mode themselves
## allows for multiple selections to be copied per switch

## @WIP: Not exactly what I wanted. But close enough for now. I want this to re-enter visual mode after yanking selection since otherwise its impossible to tell if selection actually was yanked, but still want to remain in visual/copy mode for copying multiple selections in a single visit.
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -sel clip -i" C-m \; run "tmux copy-mode"

## send contents of <system clipboard> to current tmux buffer with '<C-a>v'
bind C-v run "tmux set-buffer \"$(xclip -sel clip -o)\"; tmux paste-buffer"

# <C-a><C-c> alternate keybind to switch to Copy mode
bind C-c copy-mode  # should it be copy-mode-vi or copy-mode??
bind C-c copy-mode  # should it be copy-mode-vi or copy-mode??


# It's easier to enter keybinds with <Ctrl> included, since my finger is already there from <PREFIX>
# <C-a><C-.> enters copy mode ; <C-a><C-/> pastes content of paste buffer
bind C-p paste-buffer -p
bind . copy-mode
# bind -T copy-mode-vi . 

# <Prefix><C-/> pastes tmux paste-buffer 0
bind C-/ run-shell "tmux set-buffer -- $(tmux show-buffer); tmux paste-buffer -b 0"



# @FIXME: Below creates 2 buffers for whatever was yanked instead of appending to existing. More time/debugging needed to fix.
# 'a' in copy-mode [a]ppends each yank to the current paste-buffer buffer (buffer 0) 
#bind -T copy-mode-vi a send-keys -X copy-pipe-no-clear "xclip -selection clipboard && tmux set-buffer -a -- \"$(tmux show-buffer)\""

# @EXPERIMENTAL: change keybinds so cycling pane keys (<prefix><C-n/b>) doesnt require <Ctrl-> in 2nd key 
#
# bindings before change:
#   > bind-key -r -T prefix       C-n                    next-window 
#   > bind-key    -T prefix       C-f                    command-prompt { find-window -Z "%%" } 
#   > bind-key -r -T prefix       n                      new-window
#   > bind-key    -T prefix       M-n                    next-window -a  
#   > bind-key -r -T prefix       C-b                    previous-window 

unbind C-n
unbind C-b
unbind n


# pane cycling: <prefix>n/b
# bind-key -r -T prefix  n  next-window
# bind-key -r -T prefix  b  previous-window
bind -r n  next-window
bind -r b  previous-window


# new window: <prefix><C-n>
bind-key -r -T prefix C-n new-window

