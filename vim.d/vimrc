"" ------------------------
""  GENERAL 
"" ------------------------

" source vimrc submodules
source "$HOME/dotfiles/vim.d/rt/remaps.vimrc"


set  nocompatible
filetype plugin indent on
syntax on
let g:is_posix = 1  " correctly highlight $() if filetype=sh
set showmatch                       " highlight matching !!important!!
set showcmd                         " show command in bottom bar
"syntax enable
set linebreak
set noerrorbells
set autoindent
set expandtab
set smartindent
set tabstop=4 
set softtabstop=4
set shiftwidth=4
set complete-=i
set rnu
set smartcase
set colorcolumn=80
set hidden      " switch b/w buffers without having to save first
set noswapfile
set nobackup

" make undodir if not present
silent execute '!mkdir -p ~/.vim/undodir/'
set undodir=~/.vim/undodir  " need to create dir if DNE
set undofile
set incsearch   " highlight matches from ? and /
set laststatus=2 
set wrapscan    " wrap search results
set splitbelow
set splitright
set encoding=utf-8
set clipboard=unnamed
set backspace=indent,eol,start
set nrformats-=octal
set ttimeout
set ttimeoutlen=10
set incsearch
set laststatus=2
set ruler
set wildmenu
"set wildmode=longest,list
set wildmode=list:full
set wildignore+=*/tmp/*,*.so,*/ignore/*,*.ignore,*.zip,*.tmp  " ignore specific files and directories
set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=lastline
set history=1500
set tabpagemax=50
set nohlsearch


" autocomplete settings
set completeopt+=preview
set completeopt+=menuone
set completeopt+=longest

" --------------------------------------------
"   LEADER 
" --------------------------------------------


" decrease leader timeout latency (default 1000 ms)
set timeoutlen=500
" 
" remap leader to <space>  
let mapleader= " "

" backslash '/' and commas ',' remap to leader 
nmap <bslash> <space>
nmap , <space>

"  tmux-like commands for better window navigation remaps (change to mirror tmux)
nnoremap <C-h> <C-w>h      
nnoremap <C-j> <C-w>j      
nnoremap <C-k> <C-w>k      
nnoremap <C-l> <C-w>l      
nnoremap <leader>, <C-w>w

" normal-insert mode remaps
inoremap <leader>,, <ESC>
nnoremap <leader>,, i

" enter command mode with <Space>;
nnoremap <leader>; :
" leave command mode with <Ctrl-z>
cnoremap <leader>z <ESC>

"" ------------------------
"" REMAPS
"" ------------------------
" recover accidentally deleted text with undo (`u` in normal mode)
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>


" paste toggle
nnoremap <leader>pp :set paste<CR>
nnoremap <leader>PP :set nopaste<CR>

" disable mouse
"set mouse=
" extend mouse selection instead of showing popup mouse menu
set mousemodel=extend

" autocomplete settings
set completeopt+=preview
set completeopt+=menuone
set completeopt+=longest

"" ------------------------
""  VIM-PLUG
"" ------------------------


" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" now that plugin dirs exist, install plugin 
call plug#begin()

Plug 'dense-analysis/ale'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'preservim/vimux'
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'

" revert below if using vim 
Plug 'arcticicestudio/nord-vim'

" alernate colorschemes
Plug 'xero/miasma.nvim' 
"Plug 'shaunsingh/nord.nvim'

" neovim
" For ultisnips users.
Plug 'SirVer/ultisnips'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'
Plug 'shaunsingh/nord.nvim'
Plug 'neanias/everforest-nvim'
Plug 'AlexvZyl/nordic.nvim'


call plug#end()


"" ------------------------
"" PLUGIN CONFIG/REMAP
"" ------------------------


"" colorscheme
set t_Co=256
set background=dark
let g:nord_cursor_line_number_background = 1
let g:nord_bold_vertical_split_line = 1
let g:nord_uniform_diff_background = 1
let g:nord_italic = 1
let g:nord_underline = 1
""let g:nord_italic_comments = 1
colorscheme nord

" undodir
noremap <leader>u :UndotreeShow<CR>

"" ale

" lint on save only 
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0  " disable fixer 

" error symbols
let g:ale_sign_error = '●'
let g:ale_sign_warning = '.'

" error strings format 
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" only lint below filetypes with below linters
let g:ale_linters = {
  \ 'python': ['flake8'] ,
  \ 'bash': ['shellcheck'] ,
  \ 'sh': ['shellcheck'] ,
  \ 'yaml': ['yamllint'] ,
  \ }

" easier error cycling w/ `CTRL-e` 
nmap <silent> <C-e> <Plug>(ale_next_wrap)

" display number of errors/warnings in status line
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d. %d● ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{LinterStatus()}

"" ultisnip super-tab enhanced TAB COMPLETE
"" better key bindings for UltiSnipsExpandTrigger
let g:SuperTabDefaultCompletionType = '<tab>'
"let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpOrExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<leader>lus"
let g:UltiSnipsEditSplit="vertical"		" default is horizontal
" for custom snippets create <snip type>_custom.<snip file extension>`


function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

"let g:UltiSnipsSnippetDirectories = ['~/.vim/mysnippets', 'UltiSnips']
let g:UltiSnipsSnippetDirectories = ['UltiSnips','$HOME/.vim/MySnippets2']


" fzf.vim 
nnoremap <leader>gf :GFiles<Cr>
nnoremap <leader>rg :Rg<Cr>

" fzf for buffer exploration
nnoremap <silent><leader>l :Buffers<CR>

" `%%` expands to dirpath of current buffer in cmdline mode
cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'
