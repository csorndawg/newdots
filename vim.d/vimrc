"" ------------------------
""  GENERAL 
"" ------------------------

" remap leader to <space>
let mapleader= " "

set  nocompatible
filetype plugin indent on
syntax on
let g:is_posix = 1  " correctly highlight $() if filetype=sh
set showmatch                       " highlight matching !!important!!
set showcmd                         " show command in bottom bar
"syntax enable
set linebreak
set noerrorbells
set autoindent
set expandtab
set smartindent
set tabstop=4 
set softtabstop=4
set shiftwidth=4
set complete-=i
set nu
set rnu
set smartcase
set colorcolumn=80
set hidden      " switch b/w buffers without having to save first
set noswapfile
set nobackup

" make undodir if not present
silent execute '!mkdir -p ~/.vim/undodir/'
set undodir=~/.vim/undodir  " need to create dir if DNE
set undofile
set incsearch   " highlight matches from ? and /
set laststatus=2 
set wrapscan    " wrap search results
set splitbelow
set splitright
set encoding=utf-8
set clipboard=unnamed
set backspace=indent,eol,start
set nrformats-=octal
set ttimeout
set ttimeoutlen=10
set incsearch
set laststatus=2
set ruler
set wildmenu
"set wildmode=longest,list
set wildmode=list:full
set wildignore+=*/tmp/*,*.so,*/ignore/*,*.ignore,*.zip,*.tmp  " ignore specific files and directories
set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=lastline
set history=1500
set tabpagemax=50
set nohlsearch


" autocomplete settings
set completeopt+=preview
set completeopt+=menuone
set completeopt+=longest

" --------------------------------------------
"   LEADER 
" --------------------------------------------


" decrease leader timeout latency (default 1000 ms)
"set ttimeoutlen=500
" set latency for mappings  to 300ms and 100ms for normal vim commands
set timeout timeoutlen=300 ttimeoutlen=100

 
"  tmux-like commands for better window navigation remaps (change to mirror tmux)
nnoremap <C-h> <C-w>h      
nnoremap <C-j> <C-w>j      
nnoremap <C-k> <C-w>k      
nnoremap <C-l> <C-w>l      


"" Mode switching remaps

" switch b/w imo/nmo with <space>, and <Alt-,>
inoremap <A-,> <ESC>
nnoremap <leader>, i


" use arrows keys for additionally mode switching method
imap <leader><down> <ESC>
nmap <leader><down> i

" use <left/right> for cmo since <up/down> used for history cycling
cmap <leader><left> <ESC>
nmap <leader><left> :
 
"" ------------------------
"" REMAPS
"" ------------------------
" recover accidentally deleted text with undo (`u` in normal mode)
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>


" autocomplete settings
set completeopt+=preview
set completeopt+=menuone
set completeopt+=longest

"" ------------------------
""  VIM-PLUG
"" ------------------------


" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" now that plugin dirs exist, install plugin 
call plug#begin()

Plug 'AlexvZyl/nordic.nvim'
Plug 'SirVer/ultisnips'
Plug 'arcticicestudio/nord-vim'
Plug 'dense-analysis/ale'
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'neanias/everforest-nvim'
Plug 'nordtheme/vim'
Plug 'preservim/vimux'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'xero/miasma.nvim' 

" Experimental.
" If you have nodejs
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npx --yes yarn install' }

"" ------------------------------------------------------
"" Ultisnips/Completion Engine 
"" source:  https://git.entwicklerseite.de/vim/diff/?id2=45c3e3581b74060dae453ac097e5a4d629603393
""
"" ------------------------------------------------------

Plug 'preservim/tagbar'
Plug 'ycm-core/YouCompleteMe'

" ------------------------------------------------------

call plug#end()


"" ------------------------
"" PLUGIN CONFIG/REMAP
"" ------------------------


"" colorscheme
set t_Co=256
set background=dark
let g:nord_cursor_line_number_background = 1
let g:nord_bold_vertical_split_line = 1
let g:nord_uniform_diff_background = 1
let g:nord_italic = 1
let g:nord_underline = 1
""let g:nord_italic_comments = 1
colorscheme nord

" airline
let g:airline_section_y=''
let g:airline_section_z=''
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''

" undodir
noremap <leader>u :UndotreeShow<CR>

"" ale

" lint on save only 
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0  " disable fixer 

" error symbols
let g:ale_sign_error = '●'
let g:ale_sign_warning = '.'

" error strings format 
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" only lint below filetypes with below linters
let g:ale_linters = {
  \ 'python': ['flake8'] ,
  \ 'bash': ['shellcheck'] ,
  \ 'sh': ['shellcheck'] ,
  \ 'yaml': ['yamllint'] ,
  \ }

" easier error cycling w/ `CTRL-e` 
nmap <silent> <C-e> <Plug>(ale_next_wrap)

" display number of errors/warnings in status line
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d. %d● ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{LinterStatus()}

"OUTDATED--"" ultisnip super-tab enhanced TAB COMPLETE
"OUTDATED--"" better key bindings for UltiSnipsExpandTrigger
"OUTDATED--let g:SuperTabDefaultCompletionType = '<tab>'
"OUTDATED--"let g:UltiSnipsExpandTrigger="<tab>"
"OUTDATED--let g:UltiSnipsJumpOrExpandTrigger="<tab>"
"OUTDATED--let g:UltiSnipsJumpForwardTrigger="<tab>"
"OUTDATED--let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"OUTDATED--let g:UltiSnipsListSnippets="<leader>lus"
"OUTDATED--let g:UltiSnipsEditSplit="vertical"		" default is horizontal
"OUTDATED--" for custom snippets create <snip type>_custom.<snip file extension>`
"OUTDATED--
"OUTDATED--
"OUTDATED--function! g:UltiSnips_Complete()
"OUTDATED--  call UltiSnips#ExpandSnippet()
"OUTDATED--  if g:ulti_expand_res == 0
"OUTDATED--    if pumvisible()
"OUTDATED--      return "\<C-n>"
"OUTDATED--    else
"OUTDATED--      call UltiSnips#JumpForwards()
"OUTDATED--      if g:ulti_jump_forwards_res == 0
"OUTDATED--        return "\<TAB>"
"OUTDATED--      endif
"OUTDATED--    endif
"OUTDATED--  endif
"OUTDATED--  return ""
"OUTDATED--endfunction
"OUTDATED--
"OUTDATED--function! g:UltiSnips_Reverse()
"OUTDATED--  call UltiSnips#JumpBackwards()
"OUTDATED--  if g:ulti_jump_backwards_res == 0
"OUTDATED--    return "\<C-P>"
"OUTDATED--  endif
"OUTDATED--
"OUTDATED--  return ""
"OUTDATED--endfunction
"OUTDATED--
"OUTDATED--
"OUTDATED--if !exists("g:UltiSnipsJumpForwardTrigger")
"OUTDATED--  let g:UltiSnipsJumpForwardTrigger = "<tab>"
"OUTDATED--endif
"OUTDATED--
"OUTDATED--if !exists("g:UltiSnipsJumpBackwardTrigger")
"OUTDATED--  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"OUTDATED--endif
"OUTDATED--
"OUTDATED--"let g:UltiSnipsSnippetDirectories = ['~/.vim/mysnippets', 'UltiSnips']
"OUTDATED--"let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'vimsnips']



" fzf.vim 
nnoremap <leader>gf :GFiles<Cr>
nnoremap <leader>rg :Rg<Cr>

" fzf for buffer exploration
nnoremap <silent><leader>l :Buffers<CR>


" `%%` expands to dirpath of current buffer in cmdline mode
cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'

"" vim.d/rt dumps (temp adding back for interim)

" normal-insert mode remaps

" add alternate way of saving and exiting file from normal and insert mode
" zz in nmo saves file if it was changed 
nnoremap zz :w<cr>
nnoremap ZZ :wq<cr>

"  switch b/w nmo/cmo with `<space>;` and <ALT-;>
nnoremap <leader>; :
cnoremap <A-;> <C-c>

" paste toggle
nnoremap <leader>pp :set paste<CR>
nnoremap <leader>PP :set nopaste<CR>


" tmux-like commands for better window navigation remaps 
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

set foldmethod=indent


" ------------------------------------------------------------
"" ULTISNIPS 

" quickstart/experimental configuration
"let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'vimsnips']

"TODO
"UltisnipsEdit ALIAS
 
" ------------------------------------------------------------
" Misc. Plugins Configuartions
"

" 	tagbar
"let g:tagbar_autoclose   = 0
"let g:tagbar_autofocus   = 1
"let g:tagbar_autoshowtag = 0
let g:tagbar_compact     = 1
let g:tagbar_indent      = 0
let g:tagbar_foldlevel   = 99
"nnoremap <F9> :TagbarToggle<CR>| " bind TagBar to hotkey F9


" ------------------------------------------------------------
""  YCM 

""  Python 
let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
"let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim.d/global_extra_conf.py'



" ------------------------------------------------------------

""  FZF.VIM 
nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <C-f> :Rg!


" ------------------------------------------------------------

""  VIM-SLIME
