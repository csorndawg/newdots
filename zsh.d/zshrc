# source rc/runtime config dirs

# set up non-root bins 
export GOPATH="$HOME/.local/share/applications/go"
GO_BIN="$GOPATH/bin"
export CARGO_BIN="$HOME/.cargo/bin"
export TOOLBOX_BIN="$HOME/.toolbox/bin"
# @DELETABLE??
export UTILS_BIN="$HOME/dotfiles/utils.d"

# neovim mason install bin (needed for LSP+DAP+more)
export MASON_BIN="$HOME/.local/share/nvim/mason/bin"

# standard bins
export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

# non-standard bins
export PATH=$MASON_BIN:$UTILS_BIN:$GO_BIN:$CARGO_BIN:$TOOLBOX_BIN:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME=""

# CASE_SENSITIVE="true"
HYPHEN_INSENSITIVE="true"
HIST_STAMPS="yyyy-mm-dd"
zstyle ':omz:update' mode disabled  # disable automatic updates
# ENABLE_CORRECTION="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM="$HOME/dotfiles/zsh.d/custom"
export EDITOR=nvim

### ------------------------------
###   Plugins
### ------------------------------

# plugins (has both custom and default ohmyzsh plugins)
plugins=(git colored-man-pages zsh-autosuggestions zsh-vi-mode git-extras tldr z zsh-syntax-highlighting)

# source ohmyzsh for default behaviors
#export KEYTIMEOUT=3
source $ZSH/oh-my-zsh.sh 

# User configuration
export MANPATH="/usr/local/man:$MANPATH"

# TODO: see if this can be factored out into submodule
# ========================================================================
# 	THEME
# ========================================================================

fpath+=($HOME/dotfiles/zsh.d/custom/themes/pure)
autoload -U promptinit; promptinit

# options
PURE_GIT_PULL=0

# prompt configurations
# NORD FROST SHADES:  
#   #8fbcbb
#   #88c0d0
#   #81a1c1
#   #5e81ac

# non-git prompt components
zstyle :prompt:pure:host color '#81A1C1'
zstyle :prompt:pure:user color '#81A1C1'
zstyle :prompt:pure:path color '#81A1C1'
zstyle :prompt:pure:prompt:success color yellow
zstyle :prompt:pure:prompt:error color yellow

# git prompt components
zstyle :prompt:pure:git:action color green
#zstyle :prompt:pure:git:branch color '#9FC6C5'  # cyan
zstyle :prompt:pure:git:branch color '#B1C89D'  # green
zstyle :prompt:pure:git:dirty color red 
zstyle :prompt:pure:git:stash show yes
zstyle :prompt:pure:git:arrow color green
zstyle :prompt:pure:git:stash color yellow

prompt pure
# ========================================================================
# 	Functions
# ========================================================================

# vim
alias vim="/usr/bin/vim"
alias vi="/usr/bin/vim"

# neovim
alias nv="/usr/bin/nvim"
#alias nvim="$HOME/.local/bin/lvim"  # use lvim until nvim is operational

# lunarvim stable
alias lv="$HOME/.local/bin/lvim"
alias lvim="$HOME/.local/bin/lvim"

### ========================================
###     SOURCE DOTFILE CONFIG SUBMODULES
### ========================================

# @ NOTE: sourcing functions only cover simplest cases - might need to add
#         filtering logic to control what files and in what sequence are sourced 

# runtime configs sourcing function
rc_configs(){
    DIRPATH="$HOME/dotfiles/rc.d"
    for x in $(find $DIRPATH -type f | egrep "\.rc$");
    do
        source "$x" #&& echo "$x sourced successfully"  
    done
}

# custom zsh sourcing function
zsh_custom_completers(){
  # source completions
  echo "Sourcing zsh completions"
  ZSH_CUSTOM_COMPLETIONS="$HOME/dotfiles/zsh.d/custom/completions"
  fpath=($ZSH_CUSTOM_COMPLETIONS \\$fpath)
  autoload -Uz compinit
  compinit
}

zsh_custom_libs(){
  
  # custom libraries
  echo "Sourcing zsh/custom lib files"
  ZSH_CUST_LIB="$HOME/dotfiles/zsh.d/custom/lib"
  for zshf in $(find $ZSH_CUST_LIB -type f -name "*zshrc" );
  do 
    source "$zshf" #&& echo "$x" sourced successfully 
  done
}

zsh_custom_patches(){
  # custom patches
  echo "Sourcing custom patch files"
  IGNORE_PATTERNS=( '^exp\.' '\.gig$' 'test')
  ZSH_CUST_PATCHES="$HOME/dotfiles/zsh.d/custom/patches"
  for zshf in $(find $ZSH_CUST_PATCHES -type f -name "*zshrc" );
  do 
    echo "zshf is $zshf" 

    for ignore in ${IGNORE_PATTERNS[@]}; do
      if [ $(echo "$zshf" | grep -c "$ignore") -ge 1 ]; then
        echo "$zshf matches ignore pattern $ignore and will be not be sourced"
        continue
        echo "ignore continue test"
      fi
    done
    source "$zshf" #&& echo "$x" sourced successfully 
  done
}

# source custom configuration files
echo ""
# runtime
rc_configs > /dev/null 2>&1
zsh_custom_completers > /dev/null 2>&1
zsh_custom_libs > /dev/null 2>&1
zsh_custom_patches > /dev/null 2>&1


# zsh
#zsh_custom_configs  #> /dev/null 2>&1

## @TODO: cleanup and consolidate into function or submodule
## ONEOFF SOURCING FILES
#echo source "$HOME/dotfiles/utils.d/symlink_helper.sh"
#source "$HOME/dotfiles/utils.d/symlink_helper.sh"

# source fzf shell script
if [[  $(echo "$SHELL"  | egrep zsh -ci) -ge 1 ]]; then
  echo "ZSH shell"
  source "$HOME/.fzf.zsh" 2> /dev/null
else
  echo "BASH shell"
  source "$HOME/.fzf.bash" 2> /dev/null
fi

## fzf 
# @FIXNEEDED: shell flag tab-completion broken, key bindings for history 
# @TEMPFIX: run "ff" function to manually resource FZF files
ff(){

    # increase timeout (default 1s) for chained key binds
    export KEYTIMEOUT=3

    # re-source fzf key bindings, completions, and git-pickers
    # sources:
    #   - fzf-git:  https://github.com/junegunn/fzf-git.sh
    #   - completions: /usr/share/zsh/site-functions/fzf

    ## below only needed if using centOS 
    #source /usr/share/fzf/shell/key-bindings.zsh
    #source $XDG_BIN_HOME/fzf_completion.zsh

    # if not using CentOS just source FZF repo shell scripts directly
    source "$HOME/dotfiles/utils.d/fzf-completion.zsh"
    source "$HOME/dotfiles/utils.d/fzf-key-bindings.zsh"

    # source custom fzf-git utils.d script
    source "$HOME/dotfiles/utils.d/fzf-git.sh"     

    # rebind <Ctrl-x><Ctrl-r>
		fzf-history-widget-accept() {
			fzf-history-widget
			zle accept-line
		}
		zle     -N     fzf-history-widget-accept
		bindkey '^X^R' fzf-history-widget-accept

    # ZSH binds <Ctrl-g> by default which executes instantly, preventing 
    # any of fzf-git keybinds from being picked up. Remap the existing 
    # action to <Alt-e>.
    bindkey -r "^G" 
    bindkey "^[e" list-expand
}



###########################################
##  EXPERIMENTAL (NEW TOOLS/CONFIGS)
###########################################

## PET CLI SNIPPET manager

## add previous command to snippet manager
#cat .zshrc
function prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

## select and run snippets from the CLI
#cat .zshrc > /dev/null 2>&1
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}

ff

# aws completion
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit
complete -C '$HOME/.local/bin/aws_completer' aws
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh -1>/dev/null

# kickstart-modular alias/concurrent configs
alias nvim-kickstart-modular='NVIM_APPNAME="nvim-kickstart-modular" nvim'
alias nvk='NVIM_APPNAME="nvim-kickstart-modular" nvim'
